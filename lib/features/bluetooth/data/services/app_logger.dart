import 'dart:io';
import '../../presentation/bloc/bluetooth_bloc.dart';
import '../../presentation/bloc/bluetooth_event.dart';
import '../../domain/entities/bluetooth_log_entity.dart';

class AppLogger {
  static final AppLogger _instance = AppLogger._internal();
  factory AppLogger() => _instance;
  AppLogger._internal();

  File? _logFile;
  bool _isInitialized = false;
  BluetoothBloc? _bluetoothBloc;

  /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
  Future<void> initialize({BluetoothBloc? bluetoothBloc}) async {
    if (_isInitialized) return;
    
    _bluetoothBloc = bluetoothBloc;
    
    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ø–∫—É Downloads –¥–ª—è –≤—Å–µ—Ö –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      final directory = Directory('/storage/emulated/0/Download');
      final logDir = Directory('${directory.path}/Bluetooth_App_Logs');
      if (!await logDir.exists()) {
        await logDir.create(recursive: true);
      }
      
      final timestamp = DateTime.now().toIso8601String().replaceAll(':', '-');
      _logFile = File('${logDir.path}/bluetooth_app_$timestamp.log');
      
      await _logFile!.writeAsString('=== –õ–û–ì–ò BLUETOOTH –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ===\n');
      await _logFile!.writeAsString('–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: ${DateTime.now()}\n');
      await _logFile!.writeAsString('–ü—É—Ç—å –∫ –ª–æ–≥–∞–º: ${_logFile!.path}\n');
      await _logFile!.writeAsString('=====================================\n\n');
      
      _isInitialized = true;
      print('AppLogger: –õ–æ–≥–≥–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: ${_logFile!.path}');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥ –≤ —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      _addToAppLogs('–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –õ–æ–≥–∏: ${_logFile!.path}', LogLevel.info);
    } catch (e) {
      print('AppLogger: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: $e');
      _addToAppLogs('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: $e', LogLevel.error);
    }
  }

  /// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ BluetoothBloc –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
  void setBluetoothBloc(BluetoothBloc bluetoothBloc) {
    _bluetoothBloc = bluetoothBloc;
  }

  /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–æ–≥–∞ –≤ —Å–∏—Å—Ç–µ–º—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
  void _addToAppLogs(String message, LogLevel level, {String? deviceId, String? deviceName, Map<String, dynamic>? additionalData}) {
    if (_bluetoothBloc != null) {
      final logEntity = BluetoothLogEntity(
        id: DateTime.now().millisecondsSinceEpoch.toString(),
        timestamp: DateTime.now(),
        level: level,
        message: message,
        deviceId: deviceId,
        deviceName: deviceName,
        additionalData: additionalData,
      );
      
      _bluetoothBloc!.add(AddLogEvent(logEntity));
    }
  }

  /// –ó–∞–ø–∏—Å—å –ª–æ–≥–∞ –≤ —Ñ–∞–π–ª
  Future<void> log(String message, {String level = 'INFO', String? deviceId, String? deviceName, Map<String, dynamic>? additionalData}) async {
    if (!_isInitialized) {
      await initialize();
    }
    
    if (_logFile == null) return;
    
    try {
      final timestamp = DateTime.now().toIso8601String();
      final logEntry = '[$timestamp] [$level] $message\n';
      await _logFile!.writeAsString(logEntry, mode: FileMode.append);
      print('AppLogger: $message');
      
      // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
      final logLevel = _convertStringToLogLevel(level);
      _addToAppLogs(message, logLevel, deviceId: deviceId, deviceName: deviceName, additionalData: additionalData);
    } catch (e) {
      print('AppLogger: –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –ª–æ–≥–∞: $e');
    }
  }

  /// –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ LogLevel
  LogLevel _convertStringToLogLevel(String level) {
    switch (level.toUpperCase()) {
      case 'ERROR':
        return LogLevel.error;
      case 'WARNING':
        return LogLevel.warning;
      case 'DEBUG':
        return LogLevel.debug;
      default:
        return LogLevel.info;
    }
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  Future<void> logScanning(String message, {String? deviceId, String? deviceName, Map<String, dynamic>? additionalData}) async {
    await log('üîç –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï: $message', level: 'INFO', deviceId: deviceId, deviceName: deviceName, additionalData: additionalData);
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
  Future<void> logDeviceDiscovered(String deviceName, String deviceAddress, int rssi, List<String> serviceUuids, {Map<String, dynamic>? additionalData}) async {
    final servicesCount = serviceUuids.length;
    final servicesInfo = serviceUuids.isNotEmpty ? serviceUuids.take(3).join(', ') + (serviceUuids.length > 3 ? '...' : '') : '–ù–µ—Ç —Å–µ—Ä–≤–∏—Å–æ–≤';
    
    await log('üì° –û–ë–ù–ê–†–£–ñ–ï–ù–û: $deviceName ($deviceAddress) - RSSI: $rssi, –°–µ—Ä–≤–∏—Å—ã: $servicesCount', 
        level: 'INFO', 
        deviceId: deviceAddress, 
        deviceName: deviceName, 
        additionalData: {
          'rssi': rssi,
          'serviceUuids': serviceUuids,
          'servicesCount': servicesCount,
          'servicesInfo': servicesInfo,
          ...?additionalData,
        });
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
  Future<void> logConnection(String deviceName, String deviceAddress, {bool isConnected = true, Map<String, dynamic>? additionalData}) async {
    final status = isConnected ? '–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï' : '–û–¢–ö–õ–Æ–ß–ï–ù–ò–ï';
    final emoji = isConnected ? 'üîó' : 'üîå';
    await log('$emoji $status: $deviceName ($deviceAddress)', 
        level: isConnected ? 'INFO' : 'WARNING', 
        deviceId: deviceAddress, 
        deviceName: deviceName, 
        additionalData: additionalData);
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç –æ–±—ã—á–Ω–æ–≥–æ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Future<void> logDataReceived(String deviceName, String deviceAddress, Map<String, dynamic> data) async {
    final hexData = data['hexData'] as String? ?? '';
    final dataSize = data['dataSize'] as int? ?? 0;
    final characteristicUuid = data['characteristicUuid'] as String? ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    final serviceUuid = data['serviceUuid'] as String? ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
    
    await log('üìä –î–ê–ù–ù–´–ï: –û—Ç $deviceName - ${hexData.length > 20 ? '${hexData.substring(0, 20)}...' : hexData} ($dataSize –±–∞–π—Ç)', 
        level: 'INFO', 
        deviceId: deviceAddress, 
        deviceName: deviceName, 
        additionalData: {
          'characteristicUuid': characteristicUuid,
          'serviceUuid': serviceUuid,
          'hexData': hexData,
          'dataSize': dataSize,
          'rawData': data['rawData'],
          'data': data['data'],
          'analysis': _analyzeBluetoothData(data),
          ...data,
        });
  }

  /// –ê–Ω–∞–ª–∏–∑ Bluetooth –¥–∞–Ω–Ω—ã—Ö
  Map<String, dynamic> _analyzeBluetoothData(Map<String, dynamic> data) {
    final analysis = <String, dynamic>{};
    
    // –ü–æ–ª—É—á–∞–µ–º —Å—ã—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    final rawData = data['rawData'] as List<int>?;
    if (rawData != null && rawData.isNotEmpty) {
      analysis['size'] = rawData.length;
      analysis['hex'] = rawData.map((b) => b.toRadixString(16).padLeft(2, '0').toUpperCase()).join(' ');
      analysis['decimal'] = rawData.join(' ');
      analysis['binary'] = rawData.map((b) => b.toRadixString(2).padLeft(8, '0')).join(' ');
      
      // –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞
      try {
        final stringValue = String.fromCharCodes(rawData);
        if (RegExp(r'^[\x20-\x7E\x0A\x0D\x09]*$').hasMatch(stringValue) && stringValue.trim().isNotEmpty) {
          analysis['utf8'] = stringValue;
        }
      } catch (e) {
        analysis['utf8'] = '–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è UTF-8';
      }
      
      // –ê–Ω–∞–ª–∏–∑ –ø–æ —Ä–∞–∑–º–µ—Ä—É
      switch (rawData.length) {
        case 1:
          analysis['interpretation'] = '–û–¥–Ω–æ–±–∞–π—Ç–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
          analysis['value'] = rawData[0];
          analysis['signed'] = rawData[0] > 127 ? rawData[0] - 256 : rawData[0];
          break;
        case 2:
          analysis['interpretation'] = '16-–±–∏—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
          analysis['littleEndian'] = (rawData[1] << 8) | rawData[0];
          analysis['bigEndian'] = (rawData[0] << 8) | rawData[1];
          break;
        case 4:
          analysis['interpretation'] = '32-–±–∏—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ';
          analysis['littleEndian'] = (rawData[3] << 24) | (rawData[2] << 16) | (rawData[1] << 8) | rawData[0];
          analysis['bigEndian'] = (rawData[0] << 24) | (rawData[1] << 16) | (rawData[2] << 8) | rawData[3];
          break;
        default:
          analysis['interpretation'] = '–ú–Ω–æ–≥–æ–±–∞–π—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ';
      }
    }
    
    return analysis;
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
  Future<void> logError(String error, {String? context, String? deviceId, String? deviceName, Map<String, dynamic>? additionalData}) async {
    await log('‚ùå –û–®–ò–ë–ö–ê${context != null ? ' ($context)' : ''}: $error', 
        level: 'ERROR', 
        deviceId: deviceId, 
        deviceName: deviceName, 
        additionalData: additionalData);
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–º—É–ª—è—Ü–∏–∏
  Future<void> logEmulation(String message, {String level = 'INFO', Map<String, dynamic>? additionalData}) async {
    await log('üé≠ –≠–ú–£–õ–Ø–¶–ò–Ø: $message', level: level, additionalData: additionalData);
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è Bluetooth
  Future<void> logBluetoothState(String message, {String level = 'INFO', Map<String, dynamic>? additionalData}) async {
    await log('üì° BLUETOOTH: $message', level: level, additionalData: additionalData);
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Future<void> logDeviceServices(String deviceName, String deviceAddress, List<Map<String, dynamic>> services) async {
    await log('üîç –°–ï–†–í–ò–°–´: –ù–∞–π–¥–µ–Ω–æ ${services.length} —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ $deviceName', 
        level: 'INFO', 
        deviceId: deviceAddress, 
        deviceName: deviceName,
        additionalData: {
          'services': services,
          'servicesCount': services.length,
          'servicesDetails': _formatServicesDetails(services),
        });
  }

  /// –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–∞—Ö –¥–ª—è —Ñ–∞–π–ª–∞
  String _formatServicesDetails(List<Map<String, dynamic>> services) {
    final buffer = StringBuffer();
    buffer.writeln('=== –î–ï–¢–ê–õ–¨–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ï–†–í–ò–°–ê–• ===');
    
    for (int i = 0; i < services.length; i++) {
      final service = services[i];
      buffer.writeln('–°–µ—Ä–≤–∏—Å ${i + 1}:');
      buffer.writeln('  UUID: ${service['uuid']}');
      buffer.writeln('  –¢–∏–ø: ${service['type'] ?? 'null'}');
      
      final characteristics = service['characteristics'] as List<Map<String, dynamic>>? ?? [];
      buffer.writeln('  –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (${characteristics.length}):');
      
      for (int j = 0; j < characteristics.length; j++) {
        final char = characteristics[j];
        buffer.writeln('    ${j + 1}. UUID: ${char['uuid']}');
        buffer.writeln('       –°–≤–æ–π—Å—Ç–≤–∞: ${char['properties']}');
      }
      buffer.writeln();
    }
    
    buffer.writeln('==========================================');
    return buffer.toString();
  }

  /// –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞
  String? get logFilePath => _logFile?.path;

  /// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –ª–æ–≥–æ–≤ (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
  Future<void> cleanupOldLogs() async {
    try {
      final logDir = Directory('/storage/emulated/0/Download/Bluetooth_App_Logs');
      
      if (await logDir.exists()) {
        final files = await logDir.list().toList();
        final now = DateTime.now();
        
        for (final file in files) {
          if (file is File) {
            final stat = await file.stat();
            final age = now.difference(stat.modified);
            
            if (age.inDays > 7) {
              await file.delete();
              await log('–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –ª–æ–≥: ${file.path}');
            }
          }
        }
      }
    } catch (e) {
      print('AppLogger: –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤: $e');
    }
  }
}
