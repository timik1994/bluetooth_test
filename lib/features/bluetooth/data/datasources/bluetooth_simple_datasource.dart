import 'dart:async';
import 'package:flutter_blue_plus/flutter_blue_plus.dart' hide LogLevel;
import 'package:permission_handler/permission_handler.dart';
import '../../domain/entities/bluetooth_device_entity.dart';
import '../../domain/entities/bluetooth_log_entity.dart';
import '../models/bluetooth_device_model.dart';
import '../services/app_logger.dart';

abstract class BluetoothSimpleDataSource {
  Stream<List<BluetoothDeviceEntity>> get discoveredDevices;
  Stream<BluetoothLogEntity> get logs;
  Stream<bool> get isScanning;
  Stream<bool> get isBluetoothEnabled;

  Future<bool> isBluetoothAvailable();
  Future<bool> requestPermissions();
  Future<void> startScan();
  Future<void> stopScan();
  Future<bool> connectToDevice(String deviceId);
  Future<void> disconnectFromDevice(String deviceId);
  Future<void> clearLogs();
  Future<List<BluetoothLogEntity>> getLogs();
}

class BluetoothSimpleDataSourceImpl implements BluetoothSimpleDataSource {
  final StreamController<List<BluetoothDeviceEntity>> _devicesController =
      StreamController<List<BluetoothDeviceEntity>>.broadcast();
  final StreamController<BluetoothLogEntity> _logsController =
      StreamController<BluetoothLogEntity>.broadcast();
  final StreamController<bool> _isScanningController =
      StreamController<bool>.broadcast();
  final StreamController<bool> _isBluetoothEnabledController =
      StreamController<bool>.broadcast();

  final List<BluetoothLogEntity> _logs = [];
  final Map<String, BluetoothDeviceEntity> _discoveredDevices = {};
  final Map<String, BluetoothDevice> _connectedDevices = {};
  final AppLogger _appLogger = AppLogger();
  
  StreamSubscription? _scanResultsSubscription;
  bool _isInitialized = false;

  BluetoothSimpleDataSourceImpl() {
    _initializeAppLogger();
    _initializeBluetooth(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  }

  void _initializeAppLogger() async {
    await _appLogger.initialize();
  }

  void _initializeBluetooth() {
    if (_isInitialized) return;
    _isInitialized = true;

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Bluetooth
    FlutterBluePlus.adapterState.listen((state) {
      final isEnabled = state == BluetoothAdapterState.on;
      _isBluetoothEnabledController.add(isEnabled);
      _addLog(LogLevel.info, 'Bluetooth —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: ${isEnabled ? "–í–∫–ª—é—á–µ–Ω" : "–í—ã–∫–ª—é—á–µ–Ω"}');
    });

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    FlutterBluePlus.isScanning.listen((scanning) {
      _isScanningController.add(scanning);
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Bluetooth —Å—Ä–∞–∑—É
    FlutterBluePlus.adapterState.first.then((state) {
      final isEnabled = state == BluetoothAdapterState.on;
      _isBluetoothEnabledController.add(isEnabled);
    }).catchError((e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Bluetooth: $e');
    });
  }

  @override
  Stream<List<BluetoothDeviceEntity>> get discoveredDevices => _devicesController.stream;

  @override
  Stream<BluetoothLogEntity> get logs => _logsController.stream;

  @override
  Stream<bool> get isScanning => _isScanningController.stream;

  @override
  Stream<bool> get isBluetoothEnabled => _isBluetoothEnabledController.stream;

  @override
  Future<bool> isBluetoothAvailable() async {
    try {
      _initializeBluetooth();
      final state = await FlutterBluePlus.adapterState.first;
      return state == BluetoothAdapterState.on;
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Bluetooth: $e');
      return false;
    }
  }

  @override
  Future<bool> requestPermissions() async {
    try {
      _addLog(LogLevel.info, '–ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Bluetooth...');

      final permissions = [
        Permission.bluetooth,
        Permission.bluetoothScan,
        Permission.bluetoothConnect,
        Permission.location,
      ];

      final results = await permissions.request();
      final allGranted = results.values.every((status) => status.isGranted);

      if (allGranted) {
        _addLog(LogLevel.info, '–í—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Bluetooth –ø–æ–ª—É—á–µ–Ω—ã');
      } else {
        final deniedPermissions = results.entries
            .where((entry) => !entry.value.isGranted)
            .map((entry) => entry.key.toString())
            .join(', ');
        _addLog(LogLevel.warning, '–ù–µ –≤—Å–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã. –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: $deniedPermissions');
      }

      return allGranted;
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: $e');
      return false;
    }
  }

  @override
  Future<void> startScan() async {
    try {
      _initializeBluetooth();
      _addLog(LogLevel.info, 'üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');

      final isAvailable = await isBluetoothAvailable();
      if (!isAvailable) {
        _addLog(LogLevel.error, 'Bluetooth –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }

      // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      _discoveredDevices.clear();
      
      // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      await _loadConnectedDevices();

      // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      await FlutterBluePlus.startScan(
        timeout: const Duration(seconds: 30),
        androidUsesFineLocation: true,
      );

      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É
      await _scanResultsSubscription?.cancel();

      // –°–ª—É—à–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      _scanResultsSubscription = FlutterBluePlus.scanResults.listen((results) {
        for(int i=0;i<results.length;i++){
          print(results[i].advertisementData.toString());
        }
        try {
          for (final result in results) {
            final deviceId = result.device.remoteId.toString();
            
            if (!_discoveredDevices.containsKey(deviceId)) {
              final device = BluetoothDeviceModel.fromScanResult(result);
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã–º
              final isBonded = _isDeviceBonded(result.device);
              final deviceWithBondInfo = BluetoothDeviceModel(
                id: device.id,
                name: device.name,
                isConnected: result.device.isConnected,
                rssi: device.rssi,
                serviceUuids: device.serviceUuids,
                deviceType: device.deviceType,
                isClassicBluetooth: false,
                isBonded: isBonded,
                isConnectable: device.isConnectable,
              );
              
              _discoveredDevices[deviceId] = deviceWithBondInfo;
              //print('–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${deviceWithBondInfo.name} | ${deviceWithBondInfo.deviceType} | RSSI: ${deviceWithBondInfo.rssi}${isBonded ? " (–°–æ–ø—Ä—è–∂–µ–Ω–æ)" : ""}');
              
              // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º UI
              _updateDeviceList();
            } else {
              // –û–±–Ω–æ–≤–ª—è–µ–º RSSI –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
              final existingDevice = _discoveredDevices[deviceId]!;
              if (existingDevice.rssi != result.rssi) {
                _discoveredDevices[deviceId] = BluetoothDeviceModel(
                  id: existingDevice.id,
                  name: existingDevice.name,
                  isConnected: existingDevice.isConnected,
                  rssi: result.rssi,
                  serviceUuids: existingDevice.serviceUuids,
                  deviceType: existingDevice.deviceType,
                  isClassicBluetooth: existingDevice.isClassicBluetooth,
                  isBonded: existingDevice.isBonded,
                  isConnectable: existingDevice.isConnectable,
                );
                _updateDeviceList();
              }
            }
          }
        } catch (e) {
          _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
        }
      });

    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
    }
  }

  Future<void> _loadConnectedDevices() async {
    try {
      final connectedDevices = FlutterBluePlus.connectedDevices;
      for (final device in connectedDevices) {
        final deviceId = device.remoteId.toString();
        final deviceModel = BluetoothDeviceModel(
          id: deviceId,
          name: device.platformName.isNotEmpty ? device.platformName : '–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
          isConnected: true,
          rssi: 0,
          serviceUuids: [],
          deviceType: '–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ',
          isClassicBluetooth: false,
          isBonded: true, // –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å—á–∏—Ç–∞–µ–º —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã–º–∏
          isConnectable: true, // –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ –ø–æ–¥–∫–ª—é—á–∞–µ–º—ã
        );
        
        _discoveredDevices[deviceId] = deviceModel;
        _connectedDevices[deviceId] = device;
      }
      
      if (connectedDevices.isNotEmpty) {
        _addLog(LogLevel.info, '–ù–∞–π–¥–µ–Ω–æ ${connectedDevices.length} –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
        _updateDeviceList();
      }
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $e');
    }
  }

  bool _isDeviceBonded(BluetoothDevice device) {
    // –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã–º
    return device.isConnected || _connectedDevices.containsKey(device.remoteId.toString());
  }

  void _updateDeviceList() {
    final devicesList = _discoveredDevices.values.toList();
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º: —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –ø–æ RSSI
    devicesList.sort((a, b) {
      if (a.isConnected && !b.isConnected) return -1;
      if (!a.isConnected && b.isConnected) return 1;
      
      if (a.isBonded && !b.isBonded) return -1;
      if (!a.isBonded && b.isBonded) return 1;
      
      return b.rssi.compareTo(a.rssi);
    });
    
    _devicesController.add(devicesList);
  }

  @override
  Future<void> stopScan() async {
    try {
      await FlutterBluePlus.stopScan();
      await _scanResultsSubscription?.cancel();
      _scanResultsSubscription = null;

      final totalDevices = _discoveredDevices.length;
      _addLog(LogLevel.info, '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $totalDevices');

      if (totalDevices > 0) {
        _addLog(LogLevel.info, '=== –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ===');
        for (final device in _discoveredDevices.values) {
          final status = device.isConnected ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–æ' : 
                        device.isBonded ? '–°–æ–ø—Ä—è–∂–µ–Ω–æ' : '–ù–æ–≤–æ–µ';
          _addLog(LogLevel.info, '‚Ä¢ ${device.name} (${device.deviceType}) - $status - RSSI: ${device.rssi} dBm');
        }
        _addLog(LogLevel.info, '================================');
      }
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
    }
  }

  @override
  Future<bool> connectToDevice(String deviceId) async {
    try {
      final deviceInfo = _discoveredDevices[deviceId];
      final deviceName = deviceInfo?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';

      _addLog(LogLevel.info, '–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ "$deviceName"');

      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      await FlutterBluePlus.stopScan();
      await Future.delayed(const Duration(milliseconds: 500));

      final device = BluetoothDevice.fromId(deviceId);

      if (device.isConnected) {
        _addLog(LogLevel.info, '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "$deviceName" —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
        return true;
      }

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è
      await device.connect(
        timeout: const Duration(seconds: 30),
        autoConnect: false,
      );

      await Future.delayed(const Duration(milliseconds: 1000));

      if (device.isConnected) {
        _addLog(LogLevel.info, '‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ "$deviceName"');
        
        _connectedDevices[deviceId] = device;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Å–ø–∏—Å–∫–µ
        if (_discoveredDevices.containsKey(deviceId)) {
          final existingDevice = _discoveredDevices[deviceId]!;
          _discoveredDevices[deviceId] = BluetoothDeviceModel(
            id: existingDevice.id,
            name: existingDevice.name,
            isConnected: true,
            rssi: existingDevice.rssi,
            serviceUuids: existingDevice.serviceUuids,
            deviceType: existingDevice.deviceType,
            isClassicBluetooth: existingDevice.isClassicBluetooth,
            isBonded: true,
            isConnectable: existingDevice.isConnectable,
          );
          _updateDeviceList();
        }

        // –°–ª—É—à–∞–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
        device.connectionState.listen((state) {
          if (state == BluetoothConnectionState.disconnected) {
            _addLog(LogLevel.warning, '‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "$deviceName" –æ—Ç–∫–ª—é—á–µ–Ω–æ');
            _connectedDevices.remove(deviceId);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–ø–∏—Å–∫–µ
            if (_discoveredDevices.containsKey(deviceId)) {
              final existingDevice = _discoveredDevices[deviceId]!;
              _discoveredDevices[deviceId] = BluetoothDeviceModel(
                id: existingDevice.id,
                name: existingDevice.name,
                isConnected: false,
                rssi: existingDevice.rssi,
                serviceUuids: existingDevice.serviceUuids,
                deviceType: existingDevice.deviceType,
                isClassicBluetooth: existingDevice.isClassicBluetooth,
                isBonded: existingDevice.isBonded,
                isConnectable: existingDevice.isConnectable,
              );
              _updateDeviceList();
            }
          }
        });

        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        _startDataCollection(device, deviceName);
        
        return true;
      } else {
        _addLog(LogLevel.error, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ "$deviceName"');
        return false;
      }

    } catch (e) {
      final deviceInfo = _discoveredDevices[deviceId];
      final deviceName = deviceInfo?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';

      String errorMessage = e.toString();
      if (errorMessage.contains('133')) {
        errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∫–æ–¥ 133). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Bluetooth.';
      }

      _addLog(LogLevel.error, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ "$deviceName": $errorMessage');
      return false;
    }
  }

  Future<void> _startDataCollection(BluetoothDevice device, String deviceName) async {
    try {
      _addLog(LogLevel.info, 'üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å "$deviceName"');

      final services = await device.discoverServices();
      _addLog(LogLevel.info, 'üîç –ù–∞–π–¥–µ–Ω–æ ${services.length} —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ "$deviceName"');

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–∞—Ö —á–µ—Ä–µ–∑ AppLogger
      final servicesInfo = services.map((service) => {
        'uuid': service.uuid.toString(),
        'characteristics': service.characteristics.map((char) => {
          'uuid': char.uuid.toString(),
          'properties': char.properties.toString(),
        }).toList(),
      }).toList();

      await _appLogger.logDeviceServices(
        deviceName,
        device.remoteId.toString(),
        servicesInfo,
      );

      for (var service in services) {
        for (var characteristic in service.characteristics) {
          try {
            if (characteristic.properties.read) {
              final value = await characteristic.read();
              _addLog(LogLevel.info, 'üìä –î–∞–Ω–Ω—ã–µ –æ—Ç "$deviceName": ${value.length} –±–∞–π—Ç');
              
              // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ AppLogger
              final hexData = value.map((b) => b.toRadixString(16).padLeft(2, '0').toUpperCase()).join(' ');
              await _appLogger.logDataReceived(
                deviceName,
                device.remoteId.toString(),
                {
                  'characteristicUuid': characteristic.uuid.toString(),
                  'serviceUuid': service.uuid.toString(),
                  'hexData': hexData,
                  'dataSize': value.length,
                  'rawData': value,
                  'data': String.fromCharCodes(value.where((b) => b >= 32 && b <= 126)),
                },
              );
            }

            if (characteristic.properties.notify) {
              await characteristic.setNotifyValue(true);
              characteristic.lastValueStream.listen((value) async {
                _addLog(LogLevel.info, 'üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç "$deviceName": ${value.length} –±–∞–π—Ç');
                
                // –õ–æ–≥–∏—Ä—É–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ AppLogger
                final hexData = value.map((b) => b.toRadixString(16).padLeft(2, '0').toUpperCase()).join(' ');
                await _appLogger.logDataReceived(
                  deviceName,
                  device.remoteId.toString(),
                  {
                    'characteristicUuid': characteristic.uuid.toString(),
                    'serviceUuid': service.uuid.toString(),
                    'hexData': hexData,
                    'dataSize': value.length,
                    'rawData': value,
                    'data': String.fromCharCodes(value.where((b) => b >= 32 && b <= 126)),
                    'type': 'notification',
                  },
                );
              });
              _addLog(LogLevel.info, 'üîî –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç "$deviceName"');
            }
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
            await _appLogger.logError('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristic.uuid}: $e', 
                context: 'DataCollection', 
                deviceId: device.remoteId.toString(), 
                deviceName: deviceName);
          }
        }
      }
    } catch (e) {
      _addLog(LogLevel.error, '‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å "$deviceName": $e');
      await _appLogger.logError('–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö: $e', 
          context: 'DataCollection', 
          deviceId: device.remoteId.toString(), 
          deviceName: deviceName);
    }
  }

  @override
  Future<void> disconnectFromDevice(String deviceId) async {
    try {
      final deviceInfo = _discoveredDevices[deviceId];
      final deviceName = deviceInfo?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';

      final device = BluetoothDevice.fromId(deviceId);

      if (device.isConnected) {
        _addLog(LogLevel.info, 'üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç "$deviceName"...');
        await device.disconnect();
        _addLog(LogLevel.info, '‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç "$deviceName"');
      }

      _connectedDevices.remove(deviceId);
    } catch (e) {
      _addLog(LogLevel.error, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è: $e');
    }
  }

  @override
  Future<void> clearLogs() async {
    _logs.clear();
    _addLog(LogLevel.info, '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
  }

  @override
  Future<List<BluetoothLogEntity>> getLogs() async {
    return List<BluetoothLogEntity>.from(_logs);
  }

  void _addLog(LogLevel level, String message) {
    final log = BluetoothLogEntity(
      id: DateTime.now().millisecondsSinceEpoch.toString(),
      level: level,
      message: message,
      timestamp: DateTime.now(),
    );
    _logs.add(log);
    _logsController.add(log);
  }
}
