import 'dart:async';
import 'dart:convert';
import 'package:flutter_blue_plus/flutter_blue_plus.dart' hide LogLevel;
import 'package:permission_handler/permission_handler.dart';
import '../../domain/entities/bluetooth_device_entity.dart';
import '../../domain/entities/bluetooth_log_entity.dart';
import '../models/bluetooth_device_model.dart';
import '../models/bluetooth_log_model.dart';
import '../../../../core/utils/permission_helper.dart';
import '../services/app_logger.dart';

abstract class BluetoothLocalDataSource {
  Stream<List<BluetoothDeviceEntity>> get discoveredDevices;
  Stream<BluetoothLogEntity> get logs;
  Stream<bool> get isScanning;
  Stream<bool> get isBluetoothEnabled;
  
  Future<bool> isBluetoothAvailable();
  Future<bool> requestPermissions();
  Future<void> startScan();
  Future<void> stopScan();
  Future<bool> connectToDevice(String deviceId);
  Future<bool> reconnectToDevice(String deviceId);
  Future<void> disconnectFromDevice(String deviceId);
  Future<void> clearLogs();
  Future<List<BluetoothLogEntity>> getLogs();
}

class BluetoothLocalDataSourceImpl implements BluetoothLocalDataSource {
  final StreamController<List<BluetoothDeviceEntity>> _devicesController = 
      StreamController<List<BluetoothDeviceEntity>>.broadcast();
  final StreamController<BluetoothLogEntity> _logsController = 
      StreamController<BluetoothLogEntity>.broadcast();
  final StreamController<bool> _isScanningController = 
      StreamController<bool>.broadcast();
  final StreamController<bool> _isBluetoothEnabledController = 
      StreamController<bool>.broadcast();
  
  final List<BluetoothLogEntity> _logs = [];
  final Map<String, BluetoothDevice> _connectedDevices = {};
  final AppLogger _appLogger = AppLogger();
  
  // –ö–∞—Ä—Ç–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ MAC-–∞–¥—Ä–µ—Å—É
  final Map<String, BluetoothDeviceEntity> _discoveredDevicesMap = {};
  
  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
  final Map<String, List<Map<String, dynamic>>> _characteristicsToReadPeriodically = {}; // {characteristic, serviceUuid}
  final Map<String, Timer> _periodicReadTimers = {};
  final Map<String, List<StreamSubscription>> _characteristicSubscriptions = {};
  
  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ª–æ–≥–æ–≤
  String? _lastLogMessage;
  DateTime? _lastLogTime;
  int _duplicateLogCount = 0;
  static const Duration _logDeduplicationWindow = Duration(seconds: 5);
  
  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  final Map<String, String> _deviceNameCache = {};
  
  bool _isInitialized = false;
  StreamSubscription? _scanResultsSubscription;

  BluetoothLocalDataSourceImpl() {
    _initializeAppLogger();
    _initializeBluetooth(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ä–∞–∑—É –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏
  }

  void _initializeAppLogger() async {
    await _appLogger.initialize();
  }

  void _initializeBluetooth() {
    if (_isInitialized) return;
    _isInitialized = true;
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Bluetooth
    FlutterBluePlus.adapterState.listen((state) {
      final isEnabled = state == BluetoothAdapterState.on;
      _isBluetoothEnabledController.add(isEnabled);
      _addLog(LogLevel.info, 'Bluetooth —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å: ${isEnabled ? "–í–∫–ª—é—á–µ–Ω" : "–í—ã–∫–ª—é—á–µ–Ω"}');
    });
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    FlutterBluePlus.isScanning.listen((scanning) {
      _isScanningController.add(scanning);
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Bluetooth —Å—Ä–∞–∑—É
    FlutterBluePlus.adapterState.first.then((state) {
      final isEnabled = state == BluetoothAdapterState.on;
      _isBluetoothEnabledController.add(isEnabled);
    }).catchError((e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è Bluetooth: $e');
    });
  }

  @override
  Stream<List<BluetoothDeviceEntity>> get discoveredDevices => _devicesController.stream;

  @override
  Stream<BluetoothLogEntity> get logs => _logsController.stream;

  @override
  Stream<bool> get isScanning => _isScanningController.stream;

  @override
  Stream<bool> get isBluetoothEnabled => _isBluetoothEnabledController.stream;

  @override
  Future<bool> isBluetoothAvailable() async {
    try {
      _initializeBluetooth();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞
      final state = await FlutterBluePlus.adapterState.first;
      _addLog(LogLevel.info, '–°–æ—Å—Ç–æ—è–Ω–∏–µ Bluetooth –∞–¥–∞–ø—Ç–µ—Ä–∞: $state');
      
      if (state == BluetoothAdapterState.on) {
        return true;
      } else if (state == BluetoothAdapterState.off) {
        _addLog(LogLevel.warning, 'Bluetooth –≤—ã–∫–ª—é—á–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ Bluetooth –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.');
        return false;
      } else if (state == BluetoothAdapterState.turningOn) {
        _addLog(LogLevel.info, 'Bluetooth –≤–∫–ª—é—á–∞–µ—Ç—Å—è...');
        // –ñ–¥–µ–º –ø–æ–∫–∞ –≤–∫–ª—é—á–∏—Ç—Å—è
        await Future.delayed(const Duration(seconds: 2));
        final newState = await FlutterBluePlus.adapterState.first;
        return newState == BluetoothAdapterState.on;
      } else if (state == BluetoothAdapterState.turningOff) {
        _addLog(LogLevel.warning, 'Bluetooth –≤—ã–∫–ª—é—á–∞–µ—Ç—Å—è...');
        return false;
      } else {
        _addLog(LogLevel.warning, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Bluetooth: $state');
        return false;
      }
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Bluetooth: $e');
      return false;
    }
  }

  @override
  Future<bool> requestPermissions() async {
    try {
      _addLog(LogLevel.info, 'üîê –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Bluetooth...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
      final currentStatuses = await PermissionHelper.getAllPermissionStatuses();
      
      _addLog(LogLevel.info, 'üìã –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π:');
      for (final entry in currentStatuses.entries) {
        final permissionName = PermissionHelper.getPermissionDisplayName(entry.key);
        final statusText = PermissionHelper.getPermissionStatusText(entry.value);
        _addLog(LogLevel.info, '   ‚Ä¢ $permissionName: $statusText');
      }
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      _addLog(LogLevel.info, 'üìù –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...');
      final results = await PermissionHelper.requestRequiredPermissions();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞
      final mainGranted = results.values.every((status) => status.isGranted);
      
      if (mainGranted) {
        _addLog(LogLevel.info, '‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Bluetooth –ø–æ–ª—É—á–µ–Ω—ã');
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–µ)
        try {
          _addLog(LogLevel.info, 'üìù –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...');
          final optionalResults = await PermissionHelper.requestOptionalPermissions();
          
          _addLog(LogLevel.info, 'üìã –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è:');
          for (final entry in optionalResults.entries) {
            final permissionName = PermissionHelper.getPermissionDisplayName(entry.key);
            final statusText = PermissionHelper.getPermissionStatusText(entry.value);
            _addLog(LogLevel.info, '   ‚Ä¢ $permissionName: $statusText');
          }
        } catch (e) {
          _addLog(LogLevel.warning, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: $e');
        }
        
        return true;
      } else {
        // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∫–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã
        final deniedPermissions = <String>[];
        final permanentlyDeniedPermissions = <String>[];
        
        for (final entry in results.entries) {
          final permissionName = PermissionHelper.getPermissionDisplayName(entry.key);
          final status = entry.value;
          
          if (status.isDenied) {
            deniedPermissions.add(permissionName);
          } else if (status.isPermanentlyDenied) {
            permanentlyDeniedPermissions.add(permissionName);
          }
        }
        
        if (deniedPermissions.isNotEmpty) {
          _addLog(LogLevel.warning, '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${deniedPermissions.join(', ')}');
          _addLog(LogLevel.info, 'üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–∞–∑—Ä–µ—à–∏—Ç—å —ç—Ç–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è');
        }
        
        if (permanentlyDeniedPermissions.isNotEmpty) {
          _addLog(LogLevel.error, 'üö´ –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω—ã —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${permanentlyDeniedPermissions.join(', ')}');
          _addLog(LogLevel.info, 'üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ —ç—Ç–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤—Ä—É—á–Ω—É—é');
        }
        
        return false;
      }
    } catch (e) {
      _addLog(LogLevel.error, '‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: $e');
      return false;
    }
  }

  @override
  Future<void> startScan() async {
    try {
      _initializeBluetooth();
      _addLog(LogLevel.info, 'üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bluetooth –ø–µ—Ä–µ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      final isAvailable = await isBluetoothAvailable();
      if (!isAvailable) {
        _addLog(LogLevel.error, '‚ùå Bluetooth –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ Bluetooth –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      _addLog(LogLevel.info, 'üîê –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...');
      final hasPermissions = await requestPermissions();
      if (!hasPermissions) {
        _addLog(LogLevel.error, '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
        _addLog(LogLevel.info, 'üí° –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è');
        return;
      }
      
      // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      _clearDiscoveredDevices();
      _deviceNameCache.clear();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      await _startBLEScan();
      
    } catch (e) {
      _addLog(LogLevel.error, '‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
    }
  }

  Future<void> _startBLEScan() async {
    try {
      _addLog(LogLevel.info, 'üîç –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
      
      // –õ–æ–≥–∏—Ä—É–µ–º —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      try {
        final connectedDevices = FlutterBluePlus.connectedDevices;
        if (connectedDevices.isNotEmpty) {
          _addLog(LogLevel.info, '–ù–∞–π–¥–µ–Ω–æ ${connectedDevices.length} —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
          for (final device in connectedDevices) {
            _addLog(LogLevel.info, '–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–µ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: "${device.platformName}" (${device.remoteId})');
          }
        }
      } catch (e) {
        _addLog(LogLevel.warning, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $e');
      }
      
      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
      await _scanResultsSubscription?.cancel();
      
      // –°–ª—É—à–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      _scanResultsSubscription = FlutterBluePlus.scanResults.listen((results) {
        try {
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π BLE —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          for (final result in results) {
            final deviceId = result.device.remoteId.toString();
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            final newDevice = BluetoothDeviceModel.fromScanResult(result);
            
            // –£–ª—É—á—à–∞–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            final improvedDevice = _improveDeviceName(newDevice, result);
            
            if (!_discoveredDevicesMap.containsKey(deviceId)) {
              // –ù–æ–≤–æ–µ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
              _discoveredDevicesMap[deviceId] = improvedDevice;
              
              // –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
              _addLog(LogLevel.info, 'üîç –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${improvedDevice.name}',
                deviceId: deviceId,
                deviceName: improvedDevice.name,
                additionalData: {
                  'scan_result_analysis': {
                    'device_id': deviceId,
                    'device_name': improvedDevice.name,
                    'device_type': improvedDevice.deviceType,
                    'rssi': improvedDevice.rssi,
                    'service_count': result.advertisementData.serviceUuids.length,
                    'service_uuids': result.advertisementData.serviceUuids.map((u) => u.toString()).toList(),
                    'manufacturer_data': result.advertisementData.manufacturerData.map((key, value) => 
                      MapEntry(key.toString(), {
                        'company_id': key,
                        'data_length': value.length,
                        'raw_data_hex': value.map((b) => b.toRadixString(16).padLeft(2, '0')).join(' '),
                        'raw_data_bytes': value,
                      })),
                    'tx_power_level': result.advertisementData.txPowerLevel,
                    'local_name': result.advertisementData.localName,
                    'platform_name': result.device.platformName,
                    'advertisement_data': {
                      'manufacturer_data_keys': result.advertisementData.manufacturerData.keys.map((k) => k.toString()).toList(),
                      'service_data': result.advertisementData.serviceData.map((key, value) => 
                        MapEntry(key.toString(), {
                          'service_uuid': key.toString(),
                          'data_length': value.length,
                          'raw_data_hex': value.map((b) => b.toRadixString(16).padLeft(2, '0')).join(' '),
                          'raw_data_bytes': value,
                        })),
                    },
                  }
                });

              // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ª–æ–≥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AppLogger –¥–ª—è —Ñ–∞–π–ª–æ–≤
              _appLogger.logDeviceDiscovered(
                improvedDevice.name,
                deviceId,
                improvedDevice.rssi,
                result.advertisementData.serviceUuids.map((u) => u.toString()).toList(),
                additionalData: {
                  'deviceType': improvedDevice.deviceType,
                  'isConnectable': improvedDevice.isConnectable,
                  'isBonded': improvedDevice.isBonded,
                  'manufacturerData': result.advertisementData.manufacturerData.map((key, value) => 
                    MapEntry(key.toString(), {
                      'company_id': key,
                      'data_length': value.length,
                      'raw_data_hex': value.map((b) => b.toRadixString(16).padLeft(2, '0')).join(' '),
                      'raw_data_bytes': value,
                    })),
                  'txPowerLevel': result.advertisementData.txPowerLevel,
                  'localName': result.advertisementData.localName,
                  'platformName': result.device.platformName,
                  'serviceData': result.advertisementData.serviceData.map((key, value) => 
                    MapEntry(key.toString(), {
                      'service_uuid': key.toString(),
                      'data_length': value.length,
                      'raw_data_hex': value.map((b) => b.toRadixString(16).padLeft(2, '0')).join(' '),
                      'raw_data_bytes': value,
                    })),
                },
              );
              
              print('–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${improvedDevice.name} | ${improvedDevice.deviceType} | RSSI: ${improvedDevice.rssi}');
              _updateDeviceList(); // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º UI
            } else {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
              final existingDevice = _discoveredDevicesMap[deviceId]!;
              bool shouldUpdate = false;
              String updateReason = '';
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ RSSI (–±–æ–ª–µ–µ —á–µ–º –Ω–∞ 3 dBm –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
              if ((improvedDevice.rssi - existingDevice.rssi).abs() > 3) {
                shouldUpdate = true;
                updateReason += 'RSSI: ${existingDevice.rssi} ‚Üí ${improvedDevice.rssi}; ';
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
              if (_isBetterDeviceName(improvedDevice.name, existingDevice.name)) {
                shouldUpdate = true;
                updateReason += '–ò–º—è: "${existingDevice.name}" ‚Üí "${improvedDevice.name}"; ';
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
              if (improvedDevice.serviceUuids.length != existingDevice.serviceUuids.length) {
                shouldUpdate = true;
                updateReason += '–°–µ—Ä–≤–∏—Å—ã: ${existingDevice.serviceUuids.length} ‚Üí ${improvedDevice.serviceUuids.length}; ';
              }
              
              if (shouldUpdate) {
                _discoveredDevicesMap[deviceId] = improvedDevice;
                if (updateReason.contains('–∏–º—è') || updateReason.contains('—Å–µ—Ä–≤–∏—Å')) {
                  _addLog(LogLevel.debug, '–û–±–Ω–æ–≤–ª–µ–Ω–æ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ $deviceId: $updateReason');
                }
                _updateDeviceList(); // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
              }
            }
          }
        } catch (e) {
          _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ BLE —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
        }
      });
      
      // –ù–∞—á–∏–Ω–∞–µ–º BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      await FlutterBluePlus.startScan(
        timeout: const Duration(seconds: 30),
        continuousUpdates: true,
        continuousDivisor: 1,
        androidUsesFineLocation: true,
      );
      
      _addLog(LogLevel.info, 'BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
      
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
    }
  }

  BluetoothDeviceEntity _improveDeviceName(BluetoothDeviceEntity device, ScanResult result) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∏–º–µ–Ω
    final deviceId = device.id;
    if (_deviceNameCache.containsKey(deviceId)) {
      final cachedName = _deviceNameCache[deviceId]!;
      if (cachedName != device.name && _isBetterDeviceName(cachedName, device.name)) {
        return BluetoothDeviceEntity(
          id: device.id,
          name: cachedName,
          isConnected: device.isConnected,
          rssi: device.rssi,
          serviceUuids: device.serviceUuids,
          deviceType: device.deviceType,
          isClassicBluetooth: device.isClassicBluetooth,
          isBonded: device.isBonded,
          isConnectable: device.isConnectable,
        );
      }
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–µ–µ –∏–º—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    String bestName = device.name;
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º platformName (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    if (result.device.platformName.isNotEmpty && 
        result.device.platformName != 'Unknown' && 
        result.device.platformName != 'unknown' &&
        _isValidDeviceName(result.device.platformName) &&
        _isBetterDeviceName(result.device.platformName, bestName)) {
      bestName = result.device.platformName;
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º localName
    if (result.advertisementData.localName.isNotEmpty && 
        result.advertisementData.localName != 'Unknown' && 
        result.advertisementData.localName != 'unknown' &&
        _isValidDeviceName(result.advertisementData.localName) &&
        _isBetterDeviceName(result.advertisementData.localName, bestName)) {
      bestName = result.advertisementData.localName;
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º advName
    try {
      if (result.advertisementData.advName.isNotEmpty && 
          result.advertisementData.advName != 'Unknown' && 
          result.advertisementData.advName != 'unknown' &&
          _isValidDeviceName(result.advertisementData.advName) &&
          _isBetterDeviceName(result.advertisementData.advName, bestName)) {
        bestName = result.advertisementData.advName;
      }
    } catch (e) {
      // advName –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    }
    
    // 4. –ï—Å–ª–∏ –∏–º—è –≤—Å–µ –µ—â–µ –ø–ª–æ—Ö–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –∏–º—è
    if (!_isValidDeviceName(bestName) || bestName.contains('—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') || bestName.contains('device')) {
      bestName = _generateDescriptiveName(device, result);
    }
    
    // –ö—ç—à–∏—Ä—É–µ–º –ª—É—á—à–µ–µ –∏–º—è
    if (bestName != device.name) {
      _deviceNameCache[deviceId] = bestName;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–∏–ø–æ–º
    return BluetoothDeviceEntity(
      id: device.id,
      name: bestName,
      isConnected: device.isConnected,
      rssi: device.rssi,
      serviceUuids: device.serviceUuids,
      deviceType: _getImprovedDeviceType(bestName, device.serviceUuids),
      isClassicBluetooth: device.isClassicBluetooth,
      isBonded: device.isBonded,
      isConnectable: device.isConnectable,
    );
  }

  bool _isValidDeviceName(String name) {
    if (name.trim().isEmpty || name.length < 2) return false;
    if (name.toLowerCase().contains('unknown')) return false;
    if (name.toLowerCase().contains('bluetooth')) return false;
    if (name.toLowerCase().contains('device')) return false;
    if (name.length > 50) return false; // –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    final validChars = name.codeUnits.where((code) => 
        (code >= 32 && code <= 126) || // ASCII –ø–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        (code >= 1040 && code <= 1103) || // –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
        code == 1025 || code == 1105 || // –Å –∏ —ë
        code == 32 || code == 45 || code == 95 // –ø—Ä–æ–±–µ–ª, –¥–µ—Ñ–∏—Å, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    ).length;
    
    // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 80% —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª–∏–¥–Ω—ã–µ, –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º
    if (validChars < name.length * 0.8) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    final specialChars = name.codeUnits.where((code) => 
        code < 32 || (code > 126 && code < 1040) || code > 1103).length;
    if (specialChars > name.length * 0.2) return false;
    
    return true;
  }

  String _generateDescriptiveName(BluetoothDeviceEntity device, ScanResult result) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
    String deviceTypeHint = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    
    if (device.serviceUuids.any((uuid) => uuid.toLowerCase().contains('110b') ||
                                         uuid.toLowerCase().contains('110e'))) {
      deviceTypeHint = '–ê—É–¥–∏–æ';
    } else if (device.serviceUuids.any((uuid) => uuid.toLowerCase().contains('180d'))) {
      deviceTypeHint = '–§–∏—Ç–Ω–µ—Å';
    } else if (device.serviceUuids.any((uuid) => uuid.toLowerCase().contains('1812'))) {
      deviceTypeHint = '–í–≤–æ–¥';
    } else if (device.serviceUuids.any((uuid) => uuid.toLowerCase().contains('180f'))) {
      deviceTypeHint = '–ë–∞—Ç–∞—Ä–µ—è';
    } else if (device.serviceUuids.any((uuid) => uuid.toLowerCase().contains('180a'))) {
      deviceTypeHint = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    }
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ MAC-–∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    final deviceId = device.id;
    final shortId = deviceId.length > 4 ? deviceId.substring(deviceId.length - 4) : deviceId;
    
    return '$deviceTypeHint $shortId';
  }

  String _getImprovedDeviceType(String deviceName, List<String> serviceUuids) {
    final name = deviceName.toLowerCase();
    
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º UUID —Å–µ—Ä–≤–∏—Å–æ–≤ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
    final typeByServices = _getDeviceTypeByServices(serviceUuids);
    if (typeByServices != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') {
      return typeByServices;
    }
    
    // 2. –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–µ–Ω
    if (_isPhone(name)) return '–¢–µ–ª–µ—Ñ–æ–Ω';
    if (_isAudioDevice(name)) return '–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    if (_isComputer(name)) return '–ö–æ–º–ø—å—é—Ç–µ—Ä';
    if (_isGamingDevice(name)) return '–ò–≥—Ä–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    if (_isCar(name)) return '–ê–≤—Ç–æ–º–æ–±–∏–ª—å';
    if (_isWearableDevice(name)) return '–ù–æ—Å–∏–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞';
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if (name.contains('–∞—É–¥–∏–æ')) return '–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    if (name.contains('—Ñ–∏—Ç–Ω–µ—Å')) return '–§–∏—Ç–Ω–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    if (name.contains('–≤–≤–æ–¥')) return '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞';
    if (name.contains('–±–∞—Ç–∞—Ä–µ—è')) return '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –±–∞—Ç–∞—Ä–µ–µ–π';
    
    return 'Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
  }

  String _getDeviceTypeByServices(List<String> serviceUuids) {
    final uuidStrings = serviceUuids.map((uuid) => uuid.toLowerCase()).toList();
    
    // –ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (uuidStrings.any((uuid) => 
        uuid.contains('110b') || // Audio Source
        uuid.contains('110e') || // Audio Sink
        uuid.contains('110a')    // Advanced Audio Distribution
    )) {
      return '–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    }
    
    // –§–∏—Ç–Ω–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (uuidStrings.any((uuid) => 
        uuid.contains('180d') || // Heart Rate
        uuid.contains('1814') || // Environmental Sensing
        uuid.contains('181c')    // User Data
    )) {
      return '–§–∏—Ç–Ω–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    }
    
    // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞
    if (uuidStrings.any((uuid) => 
        uuid.contains('1812') || // Human Interface Device
        uuid.contains('1124')    // HID over GATT
    )) {
      return '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞';
    }
    
    // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –±–∞—Ç–∞—Ä–µ–µ–π
    if (uuidStrings.any((uuid) => 
        uuid.contains('180f')    // Battery Service
    )) {
      return '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –±–∞—Ç–∞—Ä–µ–µ–π';
    }
    
    return 'Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
  }

  void _updateDeviceList() {
    final devicesList = _discoveredDevicesMap.values.toList();
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    devicesList.sort((a, b) {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–µ
      if (a.isConnected && !b.isConnected) return -1;
      if (!a.isConnected && b.isConnected) return 1;
      
      // –ó–∞—Ç–µ–º –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞ (–±–æ–ª—å—à–µ RSSI = –±–ª–∏–∂–µ)
      return b.rssi.compareTo(a.rssi);
    });
    
    _devicesController.add(devicesList);
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  bool _isPhone(String name) {
    final phonePatterns = [
      'iphone', 'samsung', 'galaxy', 'note', 'pixel', 'xiaomi', 'huawei', 'oneplus',
      'oppo', 'vivo', 'realme', 'motorola', 'lg', 'sony', 'nokia', 'htc',
      'phone', 'mobile', 'smartphone', 'android', 'ios'
    ];
    return phonePatterns.any((pattern) => name.contains(pattern));
  }

  bool _isAudioDevice(String name) {
    final audioPatterns = [
      'jbl', 'bose', 'sony', 'sennheiser', 'audio', 'speaker', 'headphone', 'headset',
      'earphone', 'earbud', 'airpods', 'beats', 'harman', 'marshall', 'jabra',
      'sound', 'music', 'bluetooth', 'wireless', '–∫–æ–ª–æ–Ω–∫–∞', '–Ω–∞—É—à–Ω–∏–∫–∏'
    ];
    return audioPatterns.any((pattern) => name.contains(pattern));
  }

  bool _isComputer(String name) {
    final computerPatterns = [
      'macbook', 'mac', 'laptop', 'notebook', 'pc', 'computer', 'desktop',
      'windows', 'linux', 'ubuntu', 'thinkpad', 'dell', 'hp', 'lenovo',
      'asus', 'acer', 'msi', 'gigabyte', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–Ω–æ—É—Ç–±—É–∫'
    ];
    return computerPatterns.any((pattern) => name.contains(pattern));
  }

  bool _isGamingDevice(String name) {
    final gamingPatterns = [
      'xbox', 'playstation', 'ps4', 'ps5', 'nintendo', 'switch', 'steam',
      'gaming', 'game', 'controller', 'joystick', 'pad', '–∏–≥—Ä–∞', '–≥–µ–π–º–ø–∞–¥'
    ];
    return gamingPatterns.any((pattern) => name.contains(pattern));
  }

  bool _isCar(String name) {
    final carPatterns = [
      'car', 'auto', 'vehicle', 'bmw', 'mercedes', 'audi', 'toyota', 'honda',
      'ford', 'chevrolet', 'nissan', 'hyundai', 'kia', 'volkswagen', 'skoda',
      '–∞–≤—Ç–æ', '–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å'
    ];
    return carPatterns.any((pattern) => name.contains(pattern));
  }

  bool _isWearableDevice(String name) {
    final wearablePatterns = [
      'watch', 'band', 'fitness', 'tracker', 'mi band', 'apple watch', 'galaxy watch',
      'fitbit', 'garmin', 'huawei band', 'amazfit', 'wear', 'smartwatch',
      '–±—Ä–∞—Å–ª–µ—Ç', '—á–∞—Å—ã', '—Ñ–∏—Ç–Ω–µ—Å', '—Ç—Ä–µ–∫–µ—Ä'
    ];
    return wearablePatterns.any((pattern) => name.contains(pattern));
  }

  @override
  Future<void> stopScan() async {
    try {
      await FlutterBluePlus.stopScan();
      await _scanResultsSubscription?.cancel();
      _scanResultsSubscription = null;
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      final totalDevices = _discoveredDevicesMap.length;
      _addLog(LogLevel.info, '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $totalDevices');
      
      // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      if (totalDevices > 0) {
        _addLog(LogLevel.info, '=== –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ===');
        
        // BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for (final device in _discoveredDevicesMap.values) {
          _addLog(LogLevel.info, '‚Ä¢ ${device.name} (${device.deviceType}) - RSSI: ${device.rssi} dBm');
        }
        
        _addLog(LogLevel.info, '================================');
      }
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
    }
  }

  @override
  Future<bool> connectToDevice(String deviceId) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –ª–æ–≥–æ–≤
      final deviceInfo = _discoveredDevicesMap[deviceId];
      final deviceName = deviceInfo?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
      
      _addLog(LogLevel.info, '–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ "$deviceName"');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      await FlutterBluePlus.stopScan();
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      await Future.delayed(const Duration(milliseconds: 500));
      
      // –°–æ–∑–¥–∞–µ–º BluetoothDevice –∏–∑ ID
      final device = BluetoothDevice.fromId(deviceId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –ª–∏ —É–∂–µ
      if (device.isConnected) {
        _addLog(LogLevel.info, '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "$deviceName" —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
        return true;
      }
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –±–µ–∑ autoConnect
      await device.connect(
        timeout: const Duration(seconds: 30),
        autoConnect: false,
      );
      
      // –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await Future.delayed(const Duration(milliseconds: 1000));
      
      if (device.isConnected) {
        _addLog(LogLevel.info, '‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ "$deviceName"');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        _connectedDevices[deviceId] = device;
        
        // –°–ª—É—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        device.connectionState.listen((state) {
          if (state == BluetoothConnectionState.disconnected) {
            _addLog(LogLevel.warning, '‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "$deviceName" –æ—Ç–∫–ª—é—á–µ–Ω–æ');
            _connectedDevices.remove(deviceId);
            // –û—á–∏—â–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
            _stopPeriodicReading(deviceId);
          }
        });
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        _startDataCollection(device, deviceName);
        
        return true;
      } else {
        _addLog(LogLevel.error, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ "$deviceName"');
        return false;
      }
      
    } catch (e) {
      final deviceInfo = _discoveredDevicesMap[deviceId];
      final deviceName = deviceInfo?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Android
      String errorMessage = e.toString();
      if (errorMessage.contains('133')) {
        errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∫–æ–¥ 133). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Bluetooth.';
      } else if (errorMessage.contains('connection timeout')) {
        errorMessage = '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.';
      }
      
      _addLog(LogLevel.error, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ "$deviceName": $errorMessage');
      return false;
    }
  }

  /// –ù–∞—á–∏–Ω–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Future<void> _startDataCollection(BluetoothDevice device, String deviceName) async {
    try {
      _addLog(LogLevel.info, 'üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å "$deviceName"');
      
      // –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
      final services = await device.discoverServices();
      _addLog(LogLevel.info, 'üîç –ù–∞–π–¥–µ–Ω–æ ${services.length} —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ "$deviceName"', 
        additionalData: {
          'device_id': device.remoteId.toString(),
          'device_name': deviceName,
          'service_count': services.length,
          'service_uuids': services.map((s) => s.uuid.toString()).toList(),
        });
      
      // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ GATT —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await Future.delayed(const Duration(milliseconds: 300));

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ Device Information Service
      String? realDeviceName = await _readDeviceNameFromGATT(device, services);
      if (realDeviceName != null && realDeviceName.isNotEmpty && 
          _isValidDeviceName(realDeviceName) && 
          _isBetterDeviceName(realDeviceName, deviceName)) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ –∫—ç—à–µ –∏ –∫–∞—Ä—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        final deviceId = device.remoteId.toString();
        _deviceNameCache[deviceId] = realDeviceName;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –∫–∞—Ä—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        if (_discoveredDevicesMap.containsKey(deviceId)) {
          final existingDevice = _discoveredDevicesMap[deviceId]!;
          final updatedDevice = BluetoothDeviceEntity(
            id: existingDevice.id,
            name: realDeviceName,
            isConnected: existingDevice.isConnected,
            rssi: existingDevice.rssi,
            serviceUuids: existingDevice.serviceUuids,
            deviceType: existingDevice.deviceType,
            isClassicBluetooth: existingDevice.isClassicBluetooth,
            isBonded: existingDevice.isBonded,
            isConnectable: existingDevice.isConnectable,
          );
          _discoveredDevicesMap[deviceId] = updatedDevice;
          _updateDeviceList();
          _addLog(LogLevel.info, '‚úÖ –ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: "$deviceName" ‚Üí "$realDeviceName"');
        }
      }

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–∞—Ö —á–µ—Ä–µ–∑ AppLogger
      final servicesInfo = services.map((service) => {
        'uuid': service.uuid.toString(),
        'type': 'primary', // BluetoothService –Ω–µ –∏–º–µ–µ—Ç —Å–≤–æ–π—Å—Ç–≤–∞ type, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        'characteristics': service.characteristics.map((char) => {
          'uuid': char.uuid.toString(),
          'properties': char.properties.toString(),
        }).toList(),
      }).toList();

      await _appLogger.logDeviceServices(
        deviceName,
        device.remoteId.toString(),
        servicesInfo,
      );
      
      for (var service in services) {
        _addLog(LogLevel.debug, 'üîç –°–µ—Ä–≤–∏—Å: ${service.uuid}', 
          additionalData: {
            'service_uuid': service.uuid.toString(),
            'characteristic_count': service.characteristics.length,
            'characteristics': service.characteristics.map((c) => {
              'uuid': c.uuid.toString(),
              'properties': {
                'read': c.properties.read,
                'write': c.properties.write,
                'writeWithoutResponse': c.properties.writeWithoutResponse,
                'notify': c.properties.notify,
                'indicate': c.properties.indicate,
                'authenticatedSignedWrites': c.properties.authenticatedSignedWrites,
                'extendedProperties': c.properties.extendedProperties,
              }
            }).toList(),
          });
        
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        await Future.delayed(const Duration(milliseconds: 100));
        
        for (var characteristic in service.characteristics) {
          try {
            // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–µ
            final charInfo = {
              'characteristic_uuid': characteristic.uuid.toString(),
              'service_uuid': service.uuid.toString(),
              'properties': {
                'read': characteristic.properties.read,
                'write': characteristic.properties.write,
                'writeWithoutResponse': characteristic.properties.writeWithoutResponse,
                'notify': characteristic.properties.notify,
                'indicate': characteristic.properties.indicate,
              },
            };
            
            // –ß–∏—Ç–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —á—Ç–µ–Ω–∏–µ
            if (characteristic.properties.read) {
              try {
                final value = await _readCharacteristicWithRetry(characteristic, charInfo);
                if (value != null) {
                  _addLog(LogLevel.info, 'üìä –ß—Ç–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ "${characteristic.uuid}": ${value.length} –±–∞–π—Ç', 
                    additionalData: {
                      ...charInfo,
                      'operation': 'read',
                      'data_length': value.length,
                      'raw_data_hex': value.map((b) => b.toRadixString(16).padLeft(2, '0')).join(' '),
                      'raw_data_decimal': value.join(' '),
                      'raw_data_bytes': value,
                      'read_success': true,
                    });
                  
                  // –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (UTF-8)
                  try {
                    String? decoded;
                    try {
                      // –ü—Ä–æ–±—É–µ–º UTF-8 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
                      decoded = utf8.decode(value);
                      if (decoded.isNotEmpty && decoded.trim().isNotEmpty) {
                        _addLog(LogLevel.debug, 'üî§ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (UTF-8): "$decoded"', 
                          additionalData: {
                            ...charInfo,
                            'operation': 'decode_utf8',
                            'decoded_string': decoded,
                          });
                      }
                    } catch (e) {
                      // –ï—Å–ª–∏ UTF-8 –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º ASCII
                      final asciiDecoded = String.fromCharCodes(value.where((b) => b >= 32 && b <= 126));
                      if (asciiDecoded.isNotEmpty) {
                        _addLog(LogLevel.debug, 'üî§ –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (ASCII): "$asciiDecoded"', 
                          additionalData: {
                            ...charInfo,
                            'operation': 'decode_ascii',
                            'decoded_string': asciiDecoded,
                          });
                      }
                    }
                  } catch (e) {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                  }
                }
              } catch (e) {
                _addLog(LogLevel.warning, '‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristic.uuid}: $e',
                  additionalData: {
                    ...charInfo,
                    'operation': 'read',
                    'error': e.toString(),
                    'read_success': false,
                  });
              }
            }
            
            // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
            await Future.delayed(const Duration(milliseconds: 100));
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ —Å NOTIFY/INDICATE)
            if (characteristic.properties.notify || characteristic.properties.indicate) {
              try {
                final deviceId = device.remoteId.toString();
                await _subscribeToNotificationsWithRetry(characteristic, charInfo, deviceId, deviceName);
              } catch (e) {
                _addLog(LogLevel.warning, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${characteristic.uuid}: $e',
                  additionalData: {
                    ...charInfo,
                    'operation': 'subscribe',
                    'error': e.toString(),
                    'subscription_success': false,
                  });
              }
            }
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å READ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —á—Ç–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç NOTIFY)
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –æ—Ç–¥–∞–µ–º –≤–∞–∂–Ω—ã–º —Å–µ—Ä–≤–∏—Å–∞–º –¥–ª—è –¥–æ—Ä–æ–∂–µ–∫
            final hasRead = characteristic.properties.read;
            final hasNotify = characteristic.properties.notify || characteristic.properties.indicate;
            final isFitnessMachineService = service.uuid.toString().toLowerCase().contains('1826');
            final isTreadmillData = characteristic.uuid.toString().toLowerCase().contains('2acd') ||
                                    characteristic.uuid.toString().toLowerCase().contains('2ad9') ||
                                    characteristic.uuid.toString().toLowerCase().contains('2ada');
            
            if (hasRead && !hasNotify && (isFitnessMachineService || isTreadmillData)) {
              final deviceId = device.remoteId.toString();
              if (!_characteristicsToReadPeriodically.containsKey(deviceId)) {
                _characteristicsToReadPeriodically[deviceId] = [];
              }
              _characteristicsToReadPeriodically[deviceId]!.add({
                'characteristic': characteristic,
                'serviceUuid': service.uuid.toString(),
              });
              _addLog(LogLevel.info, 'üìã –î–æ–±–∞–≤–ª–µ–Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ ${characteristic.uuid} –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —á—Ç–µ–Ω–∏—è',
                additionalData: {
                  ...charInfo,
                  'operation': 'add_to_periodic_read',
                });
            }
          } catch (e) {
            _addLog(LogLevel.warning, '‚ö†Ô∏è –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–æ–π ${characteristic.uuid}: $e',
              additionalData: {
                'characteristic_uuid': characteristic.uuid.toString(),
                'service_uuid': service.uuid.toString(),
                'error': e.toString(),
                'error_type': e.runtimeType.toString(),
              });
          }
          
          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
          await Future.delayed(const Duration(milliseconds: 50));
        }
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
      final deviceId = device.remoteId.toString();
      final characteristicsToRead = _characteristicsToReadPeriodically[deviceId];
      if (characteristicsToRead != null && characteristicsToRead.isNotEmpty) {
        _startPeriodicReading(device, deviceId, deviceName, characteristicsToRead);
      }
      
      _addLog(LogLevel.info, '‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –∏ —á—Ç–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è "$deviceName"',
        additionalData: {
          'device_id': deviceId,
          'device_name': deviceName,
          'notify_subscriptions': _characteristicSubscriptions[deviceId]?.length ?? 0,
          'periodic_read_count': characteristicsToRead?.length ?? 0,
        });
    } catch (e) {
      _addLog(LogLevel.error, '‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å "$deviceName": $e',
        additionalData: {
          'device_id': device.remoteId.toString(),
          'device_name': deviceName,
          'error': e.toString(),
          'error_type': e.runtimeType.toString(),
        });
    }
  }
  
  /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  void _startPeriodicReading(
    BluetoothDevice device,
    String deviceId,
    String deviceName,
    List<Map<String, dynamic>> characteristicsData,
  ) {
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –µ—Å–ª–∏ –µ—Å—Ç—å
    _stopPeriodicReading(deviceId);
    
    if (characteristicsData.isEmpty) return;
    
    int currentIndex = 0;
    
    _periodicReadTimers[deviceId] = Timer.periodic(const Duration(seconds: 1), (timer) async {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Å–µ –µ—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
      if (!device.isConnected) {
        _addLog(LogLevel.warning, '‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "$deviceName" –æ—Ç–∫–ª—é—á–µ–Ω–æ, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ');
        _stopPeriodicReading(deviceId);
        return;
      }
      
      // –ß–∏—Ç–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É –ø–æ –∫—Ä—É–≥—É
      if (currentIndex < characteristicsData.length) {
        final charData = characteristicsData[currentIndex];
        final characteristic = charData['characteristic'] as BluetoothCharacteristic;
        final serviceUuid = charData['serviceUuid'] as String;
        
        try {
          final charInfo = {
            'characteristic_uuid': characteristic.uuid.toString(),
            'service_uuid': serviceUuid,
            'operation': 'periodic_read',
          };
          
          final value = await _readCharacteristicWithRetry(characteristic, charInfo);
          if (value != null) {
            _addLog(LogLevel.info, 'üìä –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ "${characteristic.uuid}": ${value.length} –±–∞–π—Ç',
              additionalData: {
                ...charInfo,
                'data_length': value.length,
                'raw_data_hex': value.map((b) => b.toRadixString(16).padLeft(2, '0')).join(' '),
                'raw_data_decimal': value.join(' '),
                'raw_data_bytes': value,
                'read_success': true,
              });
            
            // –õ–æ–≥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AppLogger
            await _appLogger.logDataReceived(
              deviceName,
              deviceId,
              {
                'characteristicUuid': characteristic.uuid.toString(),
                'serviceUuid': serviceUuid,
                'hexData': value.map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ').toUpperCase(),
                'dataSize': value.length,
                'rawData': value,
                'type': 'periodic_read',
              },
            );
          }
        } catch (e) {
          _addLog(LogLevel.warning, '‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ —á—Ç–µ–Ω–∏—è ${characteristic.uuid}: $e',
            additionalData: {
              'characteristic_uuid': characteristic.uuid.toString(),
              'service_uuid': serviceUuid,
              'operation': 'periodic_read',
              'error': e.toString(),
            });
        }
        
        currentIndex = (currentIndex + 1) % characteristicsData.length;
      }
    });
    
    _addLog(LogLevel.info, 'üîÑ –ó–∞–ø—É—â–µ–Ω–æ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ –¥–ª—è ${characteristicsData.length} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ "$deviceName" (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É)');
  }
  
  /// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  void _stopPeriodicReading(String deviceId) {
    final timer = _periodicReadTimers.remove(deviceId);
    timer?.cancel();
    
    // –û—á–∏—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
    final subscriptions = _characteristicSubscriptions.remove(deviceId);
    subscriptions?.forEach((sub) => sub.cancel());
    
    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫
    _characteristicsToReadPeriodically.remove(deviceId);
  }

  @override
  Future<bool> reconnectToDevice(String deviceId) async {
    try {
      _addLog(LogLevel.info, '–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: $deviceId');
      
      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
      final device = _connectedDevices[deviceId];
      if (device != null && device.isConnected) {
        await device.disconnect();
        _connectedDevices.remove(deviceId);
        _addLog(LogLevel.info, '–û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        await Future.delayed(const Duration(seconds: 2));
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞
      return await connectToDevice(deviceId);
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      return false;
    }
  }

  @override
  Future<void> disconnectFromDevice(String deviceId) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –ª–æ–≥–æ–≤
      final deviceInfo = _discoveredDevicesMap[deviceId];
      final deviceName = deviceInfo?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —á—Ç–µ–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –ø–æ–¥–ø–∏—Å–∫–∏
      _stopPeriodicReading(deviceId);
      
      final device = BluetoothDevice.fromId(deviceId);
      
      if (device.isConnected) {
        _addLog(LogLevel.info, 'üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç "$deviceName"...');
        await device.disconnect();
        _addLog(LogLevel.info, '‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç "$deviceName"');
      } else {
        _addLog(LogLevel.warning, '‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "$deviceName" —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
      }
      
      _connectedDevices.remove(deviceId);
    } catch (e) {
      final deviceInfo = _discoveredDevicesMap[deviceId];
      final deviceName = deviceInfo?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
      _addLog(LogLevel.error, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç "$deviceName": $e');
    }
  }

  void _addLog(LogLevel level, String message, {String? deviceId, String? deviceName, Map<String, dynamic>? additionalData}) {
    final now = DateTime.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
    if (_lastLogMessage == message && _lastLogTime != null) {
      final timeDiff = now.difference(_lastLogTime!);
      
      if (timeDiff <= _logDeduplicationWindow) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        _duplicateLogCount++;
        _lastLogTime = now;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        if (_logs.isNotEmpty) {
          final lastLogIndex = _logs.length - 1;
          final lastLog = _logs[lastLogIndex];
          
          // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–æ–≥ —Å —Å—á–µ—Ç—á–∏–∫–æ–º
          final updatedMessage = _duplicateLogCount > 1 
            ? message.replaceAll(RegExp(r' \(–ø–æ–≤—Ç–æ—Ä–µ–Ω–æ \d+ —Ä–∞–∑\)$'), '') + ' (–ø–æ–≤—Ç–æ—Ä–µ–Ω–æ $_duplicateLogCount —Ä–∞–∑)'
            : message + ' (–ø–æ–≤—Ç–æ—Ä–µ–Ω–æ $_duplicateLogCount —Ä–∞–∑)';
            
          final updatedLog = BluetoothLogModel.create(
            level: level,
            message: updatedMessage,
            deviceId: deviceId,
            deviceName: deviceName,
            additionalData: additionalData,
            timestamp: lastLog.timestamp, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
          );
          
          _logs[lastLogIndex] = updatedLog;
          _logsController.add(updatedLog);
        }
        return;
      }
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    _lastLogMessage = message;
    _lastLogTime = now;
    _duplicateLogCount = 0;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–æ–≥
    final log = BluetoothLogModel.create(
      level: level,
      message: message,
      deviceId: deviceId,
      deviceName: deviceName,
      additionalData: additionalData,
    );
    
    _logs.add(log);
    _logsController.add(log);
  }

  @override
  Future<void> clearLogs() async {
    _logs.clear();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –ª–æ–≥–æ–≤
    _lastLogMessage = null;
    _lastLogTime = null;
    _duplicateLogCount = 0;
    
    _addLog(LogLevel.info, '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
  }

  @override
  Future<List<BluetoothLogEntity>> getLogs() async {
    return List.from(_logs);
  }

  /// –ß–∏—Ç–∞–µ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  Future<List<int>?> _readCharacteristicWithRetry(
    BluetoothCharacteristic characteristic,
    Map<String, dynamic> charInfo, {
    int maxRetries = 3,
    Duration initialDelay = const Duration(milliseconds: 500),
  }) async {
    for (int attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–ø—ã—Ç–∫–∞—Ö
        final timeout = attempt == maxRetries 
            ? const Duration(seconds: 20) 
            : const Duration(seconds: 10);
        
        final value = await characteristic.read().timeout(timeout);
        return value;
      } catch (e) {
        final errorString = e.toString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏)
        final isRetryableError = errorString.contains('ERROR_GATT_WRITE_REQUEST_BUSY') ||
            errorString.contains('gatt.readCharacteristic() returned false') ||
            errorString.contains('Timed out') ||
            errorString.contains('timeout') ||
            errorString.contains('BUSY');
        
          if (!isRetryableError || attempt == maxRetries) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
          String errorMessage = '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristic.uuid}';
          if (errorString.contains('ERROR_GATT_WRITE_REQUEST_BUSY')) {
            errorMessage = '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristic.uuid}: GATT –∑–∞–Ω—è—Ç (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ)';
          } else if (errorString.contains('returned false')) {
            errorMessage = '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristic.uuid}: —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç';
          } else if (errorString.contains('Timed out') || errorString.contains('timeout')) {
            errorMessage = '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristic.uuid}: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
          }
          
          _addLog(LogLevel.error, '$errorMessage${attempt > 1 ? ' (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$maxRetries)' : ''}: $e',
            additionalData: {
              ...charInfo,
              'operation': 'read_retry',
              'attempt': attempt,
              'max_retries': maxRetries,
              'error': errorString,
            });
          
          if (attempt == maxRetries) {
            return null; // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
          }
        } else {
          // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
          _addLog(LogLevel.warning, '‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á—Ç–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristic.uuid} (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$maxRetries): $e',
            additionalData: {
              ...charInfo,
              'operation': 'read_retry',
              'attempt': attempt,
              'max_retries': maxRetries,
              'error': errorString,
            });
          
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (exponential backoff)
          final delay = Duration(milliseconds: initialDelay.inMilliseconds * attempt);
          await Future.delayed(delay);
        }
      }
    }
    return null;
  }

  /// –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –ø–æ–≤—Ç–æ—Ä–Ω—ã–º–∏ –ø–æ–ø—ã—Ç–∫–∞–º–∏ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö
  Future<StreamSubscription?> _subscribeToNotificationsWithRetry(
    BluetoothCharacteristic characteristic,
    Map<String, dynamic> charInfo,
    String deviceId,
    String deviceName, {
    int maxRetries = 3,
    Duration initialDelay = const Duration(milliseconds: 500),
  }) async {
    for (int attempt = 1; attempt <= maxRetries; attempt++) {
      try {
        await characteristic.setNotifyValue(true);
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        final subscription = characteristic.lastValueStream.listen((value) async {
          final hexData = value.map((b) => b.toRadixString(16).padLeft(2, '0')).join(' ');
          
          _addLog(LogLevel.info, 'üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç "${characteristic.uuid}": HEX: ${hexData.length > 20 ? '${hexData.substring(0, 20)}...' : hexData} (${value.length} –±–∞–π—Ç)',
            additionalData: {
              ...charInfo,
              'operation': 'notification_received',
              'data_length': value.length,
              'raw_data_hex': hexData,
              'raw_data_decimal': value.join(' '),
              'raw_data_bytes': value,
              'notification_type': characteristic.properties.notify ? 'notify' : 'indicate',
              'timestamp': AppLogger.formatTimestamp(DateTime.now()),
            });
          
          // –õ–æ–≥–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ AppLogger –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –ª–æ–≥–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
          final connectedDevice = _connectedDevices[deviceId];
          if (connectedDevice != null) {
            // –ü–æ–ª—É—á–∞–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ –∫—ç—à–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–µ
            final deviceNameForLog = _discoveredDevicesMap[deviceId]?.name ?? deviceName;
            final serviceUuidForLog = charInfo['service_uuid'] as String? ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
            
            await _appLogger.logDataReceived(
              deviceNameForLog,
              deviceId,
              {
                'characteristicUuid': characteristic.uuid.toString(),
                'serviceUuid': serviceUuidForLog,
                'hexData': hexData,
                'dataSize': value.length,
                'rawData': value,
                'type': 'notification',
              },
            );
          }
          
          // –ü–æ–ø—ã—Ç–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (UTF-8)
          try {
            String? decoded;
            try {
              // –ü—Ä–æ–±—É–µ–º UTF-8 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
              decoded = utf8.decode(value);
              if (decoded.isNotEmpty && decoded.trim().isNotEmpty) {
                _addLog(LogLevel.debug, 'üîî –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (UTF-8): "$decoded"',
                  additionalData: {
                    ...charInfo,
                    'operation': 'notification_decode_utf8',
                    'decoded_string': decoded,
                  });
              }
            } catch (e) {
              // –ï—Å–ª–∏ UTF-8 –Ω–µ —É–¥–∞–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º ASCII
              final asciiDecoded = String.fromCharCodes(value.where((b) => b >= 32 && b <= 126));
              if (asciiDecoded.isNotEmpty) {
                _addLog(LogLevel.debug, 'üîî –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (ASCII): "$asciiDecoded"',
                  additionalData: {
                    ...charInfo,
                    'operation': 'notification_decode_ascii',
                    'decoded_string': asciiDecoded,
                  });
              }
            }
          } catch (e) {
            // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
          }
        });
        
        _addLog(LogLevel.info, 'üîî –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç "${characteristic.uuid}"${attempt > 1 ? ' (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$maxRetries)' : ''}',
          additionalData: {
            ...charInfo,
            'operation': 'subscribe',
            'subscription_success': true,
            'attempt': attempt,
          });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –æ—á–∏—Å—Ç–∫–∏
        if (!_characteristicSubscriptions.containsKey(deviceId)) {
          _characteristicSubscriptions[deviceId] = [];
        }
        _characteristicSubscriptions[deviceId]!.add(subscription);
        
        return subscription; // –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å
      } catch (e) {
        final errorString = e.toString();
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–π (—Ç—Ä–µ–±—É–µ—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏)
        final isRetryableError = errorString.contains('ERROR_GATT_WRITE_REQUEST_BUSY') ||
            errorString.contains('gatt.writeDescriptor() returned') ||
            errorString.contains('setNotifyValue') ||
            errorString.contains('BUSY') ||
            errorString.contains('timeout');
        
        if (!isRetryableError || attempt == maxRetries) {
          // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∏–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
          String errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${characteristic.uuid}';
          if (errorString.contains('ERROR_GATT_WRITE_REQUEST_BUSY')) {
            errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${characteristic.uuid}: GATT –∑–∞–Ω—è—Ç (–ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ)';
          } else if (errorString.contains('gatt.writeDescriptor() returned')) {
            errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${characteristic.uuid}: –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –Ω–µ –∑–∞–ø–∏—Å–∞–Ω';
          } else if (errorString.contains('setNotifyValue')) {
            errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${characteristic.uuid}: –Ω–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';
          } else if (errorString.contains('timeout')) {
            errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${characteristic.uuid}: –ø—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è';
          }
          
          _addLog(LogLevel.error, '$errorMessage${attempt > 1 ? ' (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$maxRetries)' : ''}: $e',
            additionalData: {
              ...charInfo,
              'operation': 'subscribe_retry',
              'attempt': attempt,
              'max_retries': maxRetries,
              'error': errorString,
              'subscription_success': false,
            });
          
          if (attempt == maxRetries) {
            rethrow; // –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å
          }
        } else {
          // –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
          _addLog(LogLevel.warning, '‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ ${characteristic.uuid} (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$maxRetries): $e',
            additionalData: {
              ...charInfo,
              'operation': 'subscribe_retry',
              'attempt': attempt,
              'max_retries': maxRetries,
              'error': errorString,
            });
          
          // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π (exponential backoff)
          final delay = Duration(milliseconds: initialDelay.inMilliseconds * attempt);
          await Future.delayed(delay);
        }
      }
    }
    
    // –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –Ω–µ —É–¥–∞–ª–∏—Å—å
    return null;
  }

  /// –ß–∏—Ç–∞–µ—Ç –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ Device Information Service —á–µ—Ä–µ–∑ GATT
  /// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç null, –µ—Å–ª–∏ –∏–º—è –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å
  Future<String?> _readDeviceNameFromGATT(BluetoothDevice device, List<BluetoothService> services) async {
    try {
      // Device Information Service UUID: 0x180A
      // Device Name Characteristic UUID: 0x2A00
      const deviceInfoServiceUuid = '0000180a-0000-1000-8000-00805f9b34fb';
      const deviceNameCharacteristicUuid = '00002a00-0000-1000-8000-00805f9b34fb';
      
      // –ò—â–µ–º Device Information Service
      final deviceInfoService = services.firstWhere(
        (service) => service.uuid.toString().toLowerCase() == deviceInfoServiceUuid,
        orElse: () => throw Exception('Device Information Service not found'),
      );
      
      // –ò—â–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫—É Device Name
      final deviceNameCharacteristic = deviceInfoService.characteristics.firstWhere(
        (char) => char.uuid.toString().toLowerCase() == deviceNameCharacteristicUuid,
        orElse: () => throw Exception('Device Name characteristic not found'),
      );
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –ª–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ —á—Ç–µ–Ω–∏–µ
      if (!deviceNameCharacteristic.properties.read) {
        _addLog(LogLevel.warning, '‚ö†Ô∏è Device Name characteristic –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —á—Ç–µ–Ω–∏–µ');
        return null;
      }
      
      // –ß–∏—Ç–∞–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      final nameBytes = await deviceNameCharacteristic.read();
      if (nameBytes.isEmpty) {
        _addLog(LogLevel.warning, '‚ö†Ô∏è Device Name characteristic –ø—É—Å—Ç–∞');
        return null;
      }
      
      // –î–µ–∫–æ–¥–∏—Ä—É–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      // –ü—Ä–æ–±—É–µ–º UTF-8 –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
      String deviceName;
      try {
        deviceName = utf8.decode(nameBytes, allowMalformed: true).trim();
      } catch (e) {
        // –ï—Å–ª–∏ UTF-8 –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø—Ä–æ–±—É–µ–º ASCII
        deviceName = String.fromCharCodes(nameBytes.where((b) => b >= 32 && b <= 126)).trim();
      }
      
      if (deviceName.isEmpty) {
        _addLog(LogLevel.warning, '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞');
        return null;
      }
      
      _addLog(LogLevel.info, '‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–∑ GATT: "$deviceName"');
      return deviceName;
      
    } catch (e) {
      // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, —Ç–∞–∫ –∫–∞–∫ –Ω–µ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏–º–µ—é—Ç Device Information Service
      return null;
    }
  }

  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ª—É—á—à–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
  bool _isBetterDeviceName(String newName, String existingName) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω
    final newNameValid = _isValidDeviceName(newName);
    final existingNameValid = _isValidDeviceName(existingName);
    
    // –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∏–º—è –≤–∞–ª–∏–¥–Ω–æ–µ, –∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–µ—Ç, –Ω–æ–≤–æ–µ –ª—É—á—à–µ
    if (newNameValid && !existingNameValid) return true;
    
    // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–º—è –≤–∞–ª–∏–¥–Ω–æ–µ, –∞ –Ω–æ–≤–æ–µ –Ω–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ª—É—á—à–µ
    if (!newNameValid && existingNameValid) return false;
    
    // –ï—Å–ª–∏ –æ–±–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ, –≤—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–µ
    if (!newNameValid && !existingNameValid) {
      return newName.length > existingName.length;
    }
    
    // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" –∏–ª–∏ "device", –Ω–æ–≤–æ–µ –∏–º—è –ª—É—á—à–µ
    if (existingName.toLowerCase().contains('—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') || 
        existingName.toLowerCase().contains('device') ||
        existingName.toLowerCase().contains('–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ')) {
      return true;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" –∏–ª–∏ "device", –∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–µ—Ç, —Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ª—É—á—à–µ
    if (newName.toLowerCase().contains('—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') || 
        newName.toLowerCase().contains('device') ||
        newName.toLowerCase().contains('–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ')) {
      return false;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª–∏–Ω–Ω–µ–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", –æ–Ω–æ –ª—É—á—à–µ
    if (newName.length > existingName.length && 
        !newName.toLowerCase().contains('—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')) {
      return true;
    }
    
    // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤), –Ω–æ–≤–æ–µ –∏–º—è –ª—É—á—à–µ
    if (existingName.length < 3) {
      return true;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±—Ä–µ–Ω–¥—ã, –æ–Ω–æ –ª—É—á—à–µ
    final knownBrands = ['samsung', 'iphone', 'jbl', 'sony', 'bose', 'xiaomi', 'huawei', 'oneplus'];
    final newHasBrand = knownBrands.any((brand) => newName.toLowerCase().contains(brand));
    final existingHasBrand = knownBrands.any((brand) => existingName.toLowerCase().contains(brand));
    
    if (newHasBrand && !existingHasBrand) return true;
    if (!newHasBrand && existingHasBrand) return false;
    
    return false;
  }

  /// –û—á–∏—â–∞–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏)
  void _clearDiscoveredDevices() {
    _discoveredDevicesMap.clear();
    _addLog(LogLevel.info, '–û—á–∏—â–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
  }

  void dispose() {
    _devicesController.close();
    _logsController.close();
    _isScanningController.close();
    _isBluetoothEnabledController.close();
  }
}