import 'dart:async';
import 'package:flutter_blue_plus/flutter_blue_plus.dart' hide LogLevel;
import 'package:permission_handler/permission_handler.dart';
import 'package:flutter_bluetooth_serial/flutter_bluetooth_serial.dart' as classic;
import '../../domain/entities/bluetooth_device_entity.dart';
import '../../domain/entities/bluetooth_log_entity.dart';
import '../models/bluetooth_device_model.dart';
import '../models/bluetooth_log_model.dart';
import '../../../../core/utils/permission_helper.dart';

abstract class BluetoothLocalDataSource {
  Stream<List<BluetoothDeviceEntity>> get discoveredDevices;
  Stream<BluetoothLogEntity> get logs;
  Stream<bool> get isScanning;
  Stream<bool> get isBluetoothEnabled;
  
  Future<bool> isBluetoothAvailable();
  Future<bool> requestPermissions();
  Future<void> startScan();
  Future<void> stopScan();
  Future<bool> connectToDevice(String deviceId);
  Future<bool> reconnectToDevice(String deviceId);
  Future<void> disconnectFromDevice(String deviceId);
  Future<void> clearLogs();
  Future<List<BluetoothLogEntity>> getLogs();
}

class BluetoothLocalDataSourceImpl implements BluetoothLocalDataSource {
  final StreamController<List<BluetoothDeviceEntity>> _devicesController = 
      StreamController<List<BluetoothDeviceEntity>>.broadcast();
  final StreamController<BluetoothLogEntity> _logsController = 
      StreamController<BluetoothLogEntity>.broadcast();
  final StreamController<bool> _isScanningController = 
      StreamController<bool>.broadcast();
  final StreamController<bool> _isBluetoothEnabledController = 
      StreamController<bool>.broadcast();
  
  final List<BluetoothLogEntity> _logs = [];
  final Map<String, BluetoothDevice> _connectedDevices = {};
  
  // –ö–∞—Ä—Ç–∞ –¥–ª—è –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ MAC-–∞–¥—Ä–µ—Å—É
  final Map<String, BluetoothDeviceEntity> _discoveredDevicesMap = {};
  
  // –î–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—è –ª–æ–≥–æ–≤
  String? _lastLogMessage;
  DateTime? _lastLogTime;
  int _duplicateLogCount = 0;
  static const Duration _logDeduplicationWindow = Duration(seconds: 5);
  
  // –£–ª—É—á—à–µ–Ω–Ω–æ–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  final Map<String, String> _deviceNameCache = {};
  
  // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Bluetooth
  StreamSubscription<classic.BluetoothDiscoveryResult>? _classicBluetoothSubscription;
  final Map<String, BluetoothDeviceEntity> _classicDevicesMap = {};
  
  BluetoothLocalDataSourceImpl() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–∏
  }

  bool _isInitialized = false;
  StreamSubscription? _scanResultsSubscription;

  void _initializeBluetooth() {
    if (_isInitialized) return;
    _isInitialized = true;
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è Bluetooth
    FlutterBluePlus.adapterState.listen((state) {
      _isBluetoothEnabledController.add(state == BluetoothAdapterState.on);
    });
    
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    FlutterBluePlus.isScanning.listen((scanning) {
      _isScanningController.add(scanning);
    });
  }

  @override
  Stream<List<BluetoothDeviceEntity>> get discoveredDevices => _devicesController.stream;

  @override
  Stream<BluetoothLogEntity> get logs => _logsController.stream;

  @override
  Stream<bool> get isScanning => _isScanningController.stream;

  @override
  Stream<bool> get isBluetoothEnabled => _isBluetoothEnabledController.stream;

  @override
  Future<bool> isBluetoothAvailable() async {
    try {
      _initializeBluetooth();
      final state = await FlutterBluePlus.adapterState.first;
      return state == BluetoothAdapterState.on;
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Bluetooth: $e');
      return false;
    }
  }

  @override
  Future<bool> requestPermissions() async {
    try {
      _addLog(LogLevel.info, '–ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π Bluetooth...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
      final currentStatuses = await PermissionHelper.getAllPermissionStatuses();
      
      _addLog(LogLevel.info, '–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: ${currentStatuses.map((k, v) => MapEntry(PermissionHelper.getPermissionDisplayName(k), PermissionHelper.getPermissionStatusText(v))).toString()}');
      
      // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      final results = await PermissionHelper.requestRequiredPermissions();
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å—ã
      for (final entry in results.entries) {
        currentStatuses[entry.key] = entry.value;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      final mainGranted = results.values.every((status) => status.isGranted);
      
      if (mainGranted) {
        _addLog(LogLevel.info, '–í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è Bluetooth –ø–æ–ª—É—á–µ–Ω—ã');
        
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
        try {
          final optionalResults = await PermissionHelper.requestOptionalPermissions();
          for (final entry in optionalResults.entries) {
            currentStatuses[entry.key] = entry.value;
          }
          _addLog(LogLevel.info, '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è: ${optionalResults.map((k, v) => MapEntry(PermissionHelper.getPermissionDisplayName(k), PermissionHelper.getPermissionStatusText(v))).toString()}');
        } catch (e) {
          _addLog(LogLevel.warning, '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: $e');
        }
        
        return true;
      } else {
        final deniedPermissions = results.entries
            .where((entry) => !entry.value.isGranted)
            .map((entry) => PermissionHelper.getPermissionDisplayName(entry.key))
            .join(', ');
        _addLog(LogLevel.warning, '–ù–µ –≤—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –ø–æ–ª—É—á–µ–Ω—ã. –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: $deniedPermissions');
        return false;
      }
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π: $e');
      return false;
    }
  }

  @override
  Future<void> startScan() async {
    try {
      _initializeBluetooth();
      _addLog(LogLevel.info, 'üîç –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bluetooth –ø–µ—Ä–µ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
      final isAvailable = await isBluetoothAvailable();
      if (!isAvailable) {
        _addLog(LogLevel.error, 'Bluetooth –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        return;
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      final hasPermissions = await requestPermissions();
      if (!hasPermissions) {
        _addLog(LogLevel.error, '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è');
        return;
      }
      
      // –û—á–∏—â–∞–µ–º –∫–∞—Ä—Ç—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      _clearDiscoveredDevices();
      _classicDevicesMap.clear();
      _deviceNameCache.clear();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      await _startBLEScan();
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ Bluetooth —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
      await _startClassicBluetoothScan();
      
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
    }
  }

  Future<void> _startBLEScan() async {
    try {
      _addLog(LogLevel.info, 'üîç –ó–∞–ø—É—Å–∫ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
      
      // –õ–æ–≥–∏—Ä—É–µ–º —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
      try {
        final connectedDevices = FlutterBluePlus.connectedDevices;
        if (connectedDevices.isNotEmpty) {
          _addLog(LogLevel.info, '–ù–∞–π–¥–µ–Ω–æ ${connectedDevices.length} —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
          for (final device in connectedDevices) {
            _addLog(LogLevel.info, '–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–µ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: "${device.platformName}" (${device.remoteId})');
          }
        }
      } catch (e) {
        _addLog(LogLevel.warning, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $e');
      }
      
      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
      await _scanResultsSubscription?.cancel();
      
      // –°–ª—É—à–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
      _scanResultsSubscription = FlutterBluePlus.scanResults.listen((results) {
        try {
          
          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π BLE —Ä–µ–∑—É–ª—å—Ç–∞—Ç
          for (final result in results) {
            final deviceId = result.device.remoteId.toString();
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            final newDevice = BluetoothDeviceModel.fromScanResult(result);
            
            // –£–ª—É—á—à–∞–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
            final improvedDevice = _improveDeviceName(newDevice, result);
            
            if (!_discoveredDevicesMap.containsKey(deviceId)) {
              // –ù–æ–≤–æ–µ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ - —Å—Ä–∞–∑—É –¥–æ–±–∞–≤–ª—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
              _discoveredDevicesMap[deviceId] = improvedDevice;
              print('–ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${improvedDevice.name} | ${improvedDevice.deviceType} | RSSI: ${improvedDevice.rssi}');
              _updateDeviceList(); // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º UI
            } else {
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
              final existingDevice = _discoveredDevicesMap[deviceId]!;
              bool shouldUpdate = false;
              String updateReason = '';
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ RSSI (–±–æ–ª–µ–µ —á–µ–º –Ω–∞ 3 dBm –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è)
              if ((improvedDevice.rssi - existingDevice.rssi).abs() > 3) {
                shouldUpdate = true;
                updateReason += 'RSSI: ${existingDevice.rssi} ‚Üí ${improvedDevice.rssi}; ';
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–ª—É—á—à–µ–Ω–∏–µ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
              if (_isBetterDeviceName(improvedDevice.name, existingDevice.name)) {
                shouldUpdate = true;
                updateReason += '–ò–º—è: "${existingDevice.name}" ‚Üí "${improvedDevice.name}"; ';
              }
              
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
              if (improvedDevice.serviceUuids.length != existingDevice.serviceUuids.length) {
                shouldUpdate = true;
                updateReason += '–°–µ—Ä–≤–∏—Å—ã: ${existingDevice.serviceUuids.length} ‚Üí ${improvedDevice.serviceUuids.length}; ';
              }
              
              if (shouldUpdate) {
                _discoveredDevicesMap[deviceId] = improvedDevice;
                if (updateReason.contains('–∏–º—è') || updateReason.contains('—Å–µ—Ä–≤–∏—Å')) {
                  _addLog(LogLevel.debug, '–û–±–Ω–æ–≤–ª–µ–Ω–æ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ $deviceId: $updateReason');
                }
                _updateDeviceList(); // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º UI –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
              }
            }
          }
        } catch (e) {
          _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ BLE —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
        }
      });
      
      // –ù–∞—á–∏–Ω–∞–µ–º BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
      await FlutterBluePlus.startScan(
        timeout: const Duration(seconds: 30),
        continuousUpdates: true,
        continuousDivisor: 1,
        androidUsesFineLocation: true,
      );
      
      _addLog(LogLevel.info, 'BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏');
      
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
    }
  }

  Future<void> _startClassicBluetoothScan() async {
    try {
      _addLog(LogLevel.info, 'üîç –ó–∞–ø—É—Å–∫ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ Bluetooth —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...');
      
      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ø–æ–¥–ø–∏—Å–∫—É –µ—Å–ª–∏ –µ—Å—Ç—å
      await _classicBluetoothSubscription?.cancel();
      
      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      try {
        final bondedDevices = await classic.FlutterBluetoothSerial.instance.getBondedDevices();
        if (bondedDevices.isNotEmpty) {
          _addLog(LogLevel.info, '–ù–∞–π–¥–µ–Ω–æ ${bondedDevices.length} —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
          for (final device in bondedDevices) {
            final deviceEntity = _createClassicBluetoothDevice(device, true);
            _classicDevicesMap[device.address] = deviceEntity;
            _addLog(LogLevel.info, 'üì± –°–æ–ø—Ä—è–∂–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: "${device.name}" (${device.address})');
          }
          _updateDeviceList();
        }
      } catch (e) {
        _addLog(LogLevel.warning, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $e');
      }
      
      // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–∏—Å–∫ –Ω–æ–≤—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      _classicBluetoothSubscription = classic.FlutterBluetoothSerial.instance.startDiscovery().listen((result) {
        try {
          final deviceEntity = _createClassicBluetoothDevice(result.device, false);
          final deviceId = result.device.address;
          
          if (!_classicDevicesMap.containsKey(deviceId)) {
            _classicDevicesMap[deviceId] = deviceEntity;
            _addLog(LogLevel.info, 'üî¥ –ù–æ–≤–æ–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: "${deviceEntity.name}" (${deviceEntity.deviceType}) - RSSI: ${deviceEntity.rssi}');
            _updateDeviceList(); // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º UI
          } else {
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –µ—Å–ª–∏ –Ω–∞—à–ª–∏ –ª—É—á—à—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            final existingDevice = _classicDevicesMap[deviceId]!;
            if (_isBetterDeviceName(deviceEntity.name, existingDevice.name) ||
                deviceEntity.deviceType != existingDevice.deviceType) {
              _classicDevicesMap[deviceId] = deviceEntity;
              _addLog(LogLevel.debug, '–û–±–Ω–æ–≤–ª–µ–Ω–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: "${deviceEntity.name}"');
              _updateDeviceList(); // –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º UI
            }
          }
        } catch (e) {
          _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ Bluetooth —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: $e');
        }
      });
      
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–≥–æ Bluetooth —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
    }
  }

  BluetoothDeviceEntity _createClassicBluetoothDevice(classic.BluetoothDevice device, bool isBonded) {
    // –£–ª—É—á—à–∞–µ–º –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    String deviceName = device.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    
    // –ï—Å–ª–∏ –∏–º—è –ø—É—Å—Ç–æ–µ –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–µ, —Å–æ–∑–¥–∞–µ–º –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ
    if (!_isValidDeviceName(deviceName) || deviceName == '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') {
      deviceName = _generateClassicDeviceName(device);
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    final deviceType = _getImprovedDeviceType(deviceName, const []);
    
    return BluetoothDeviceEntity(
      id: device.address,
      name: deviceName,
      deviceType: deviceType,
      rssi: isBonded ? 0 : -50, // –î–ª—è —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ RSSI –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω
      isConnected: false,
      serviceUuids: const [], // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Bluetooth –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç UUID —Å–µ—Ä–≤–∏—Å–æ–≤
      isClassicBluetooth: true,
      isBonded: isBonded,
    );
  }

  String _generateClassicDeviceName(classic.BluetoothDevice device) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∫–ª–∞—Å—Å—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    String deviceTypeHint = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø –ø–æ –∫–ª–∞—Å—Å—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
      if (device.type == classic.BluetoothDeviceType.classic) {
        deviceTypeHint = 'Classic';
      } else if (device.type == classic.BluetoothDeviceType.le) {
        deviceTypeHint = 'BLE';
      } else if (device.type == classic.BluetoothDeviceType.dual) {
        deviceTypeHint = 'Dual';
      }
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
    }
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ MAC-–∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    final address = device.address;
    final shortId = address.length > 4 ? address.substring(address.length - 4) : address;
    
    return '$deviceTypeHint $shortId';
  }

  String _getClassicBluetoothDeviceType(classic.BluetoothDevice device) {
    final name = (device.name ?? '').toLowerCase();
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∏–º–µ–Ω–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (_isPhone(name)) return '–¢–µ–ª–µ—Ñ–æ–Ω';
    if (_isAudioDevice(name)) return '–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    if (_isComputer(name)) return '–ö–æ–º–ø—å—é—Ç–µ—Ä';
    if (_isGamingDevice(name)) return '–ò–≥—Ä–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    if (_isCar(name)) return '–ê–≤—Ç–æ–º–æ–±–∏–ª—å';
    if (_isWearableDevice(name)) return '–ù–æ—Å–∏–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞';
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ —Ç–∏–ø—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (device.type == classic.BluetoothDeviceType.unknown) {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    } else if (device.type == classic.BluetoothDeviceType.classic) {
      return '–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ Bluetooth';
    } else if (device.type == classic.BluetoothDeviceType.le) {
      return 'Bluetooth Low Energy';
    } else if (device.type == classic.BluetoothDeviceType.dual) {
      return 'Dual Mode';
    }
    
    return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
  }

  BluetoothDeviceEntity _improveDeviceName(BluetoothDeviceEntity device, ScanResult result) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à –∏–º–µ–Ω
    final deviceId = device.id;
    if (_deviceNameCache.containsKey(deviceId)) {
      final cachedName = _deviceNameCache[deviceId]!;
      if (cachedName != device.name && _isBetterDeviceName(cachedName, device.name)) {
        return BluetoothDeviceEntity(
          id: device.id,
          name: cachedName,
          isConnected: device.isConnected,
          rssi: device.rssi,
          serviceUuids: device.serviceUuids,
          deviceType: device.deviceType,
          isClassicBluetooth: device.isClassicBluetooth,
          isBonded: device.isBonded,
        );
      }
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –ª—É—á—à–µ–µ –∏–º—è –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    String bestName = device.name;
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º platformName (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫)
    if (result.device.platformName.isNotEmpty && 
        result.device.platformName != 'Unknown' && 
        result.device.platformName != 'unknown' &&
        _isValidDeviceName(result.device.platformName) &&
        _isBetterDeviceName(result.device.platformName, bestName)) {
      bestName = result.device.platformName;
    }
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º localName
    if (result.advertisementData.localName.isNotEmpty && 
        result.advertisementData.localName != 'Unknown' && 
        result.advertisementData.localName != 'unknown' &&
        _isValidDeviceName(result.advertisementData.localName) &&
        _isBetterDeviceName(result.advertisementData.localName, bestName)) {
      bestName = result.advertisementData.localName;
    }
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º advName
    try {
      if (result.advertisementData.advName.isNotEmpty && 
          result.advertisementData.advName != 'Unknown' && 
          result.advertisementData.advName != 'unknown' &&
          _isValidDeviceName(result.advertisementData.advName) &&
          _isBetterDeviceName(result.advertisementData.advName, bestName)) {
        bestName = result.advertisementData.advName;
      }
    } catch (e) {
      // advName –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
    }
    
    // 4. –ù–ï –∏—Å–ø–æ–ª—å–∑—É–µ–º manufacturerData –¥–ª—è –∏–º–µ–Ω - —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–º —Å–∏–º–≤–æ–ª–∞–º
    // manufacturerData —Å–æ–¥–µ—Ä–∂–∏—Ç –±–∏–Ω–∞—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∞ –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∏–º–µ–Ω–∞
    
    // 5. –ï—Å–ª–∏ –∏–º—è –≤—Å–µ –µ—â–µ –ø–ª–æ—Ö–æ–µ, –ø—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–µ –∏–º—è
    if (!_isValidDeviceName(bestName) || bestName.contains('—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') || bestName.contains('device')) {
      bestName = _generateDescriptiveName(device, result);
    }
    
    // –ö—ç—à–∏—Ä—É–µ–º –ª—É—á—à–µ–µ –∏–º—è
    if (bestName != device.name) {
      _deviceNameCache[deviceId] = bestName;
    }
    
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ç–∏–ø–æ–º
    return BluetoothDeviceEntity(
      id: device.id,
      name: bestName,
      isConnected: device.isConnected,
      rssi: device.rssi,
      serviceUuids: device.serviceUuids,
      deviceType: _getImprovedDeviceType(bestName, device.serviceUuids),
      isClassicBluetooth: device.isClassicBluetooth,
      isBonded: device.isBonded,
    );
  }

  bool _isValidDeviceName(String name) {
    if (name.trim().isEmpty || name.length < 2) return false;
    if (name.toLowerCase().contains('unknown')) return false;
    if (name.toLowerCase().contains('bluetooth')) return false;
    if (name.toLowerCase().contains('device')) return false;
    if (name.length > 50) return false; // –°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –∏–º—è
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∏—Å–∫–∞–∂–µ–Ω–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã - –±–æ–ª–µ–µ —Å—Ç—Ä–æ–≥–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    final validChars = name.codeUnits.where((code) => 
        (code >= 32 && code <= 126) || // ASCII –ø–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
        (code >= 1040 && code <= 1103) || // –ö–∏—Ä–∏–ª–ª–∏—Ü–∞
        code == 1025 || code == 1105 || // –Å –∏ —ë
        code == 32 || code == 45 || code == 95 // –ø—Ä–æ–±–µ–ª, –¥–µ—Ñ–∏—Å, –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ
    ).length;
    
    // –ï—Å–ª–∏ –º–µ–Ω—å—à–µ 80% —Å–∏–º–≤–æ–ª–æ–≤ –≤–∞–ª–∏–¥–Ω—ã–µ, –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º
    if (validChars < name.length * 0.8) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    final specialChars = name.codeUnits.where((code) => 
        code < 32 || (code > 126 && code < 1040) || code > 1103).length;
    if (specialChars > name.length * 0.2) return false;
    
    return true;
  }

  List<String> _extractNamesFromManufacturerData(List<int> data) {
    final names = <String>[];
    
    // –ù–ï –ø—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å manufacturerData –∫–∞–∫ —Å—Ç—Ä–æ–∫—É!
    // –≠—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ–±—ã—á–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç –±–∏–Ω–∞—Ä–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∞ –Ω–µ —Ç–µ–∫—Å—Ç
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∏—Å–∫–∞–∂–µ–Ω–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    
    return names;
  }

  String _generateDescriptiveName(BluetoothDeviceEntity device, ScanResult result) {
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ —Å–µ—Ä–≤–∏—Å–∞–º
    String deviceTypeHint = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    
    if (device.serviceUuids.any((uuid) => uuid.toLowerCase().contains('110b') ||
                                         uuid.toLowerCase().contains('110e'))) {
      deviceTypeHint = '–ê—É–¥–∏–æ';
    } else if (device.serviceUuids.any((uuid) => uuid.toLowerCase().contains('180d'))) {
      deviceTypeHint = '–§–∏—Ç–Ω–µ—Å';
    } else if (device.serviceUuids.any((uuid) => uuid.toLowerCase().contains('1812'))) {
      deviceTypeHint = '–í–≤–æ–¥';
    } else if (device.serviceUuids.any((uuid) => uuid.toLowerCase().contains('180f'))) {
      deviceTypeHint = '–ë–∞—Ç–∞—Ä–µ—è';
    } else if (device.serviceUuids.any((uuid) => uuid.toLowerCase().contains('180a'))) {
      deviceTypeHint = '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    }
    
    // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 —Å–∏–º–≤–æ–ª–∞ MAC-–∞–¥—Ä–µ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏
    final deviceId = device.id;
    final shortId = deviceId.length > 4 ? deviceId.substring(deviceId.length - 4) : deviceId;
    
    return '$deviceTypeHint $shortId';
  }

  String _getImprovedDeviceType(String deviceName, List<String> serviceUuids) {
    final name = deviceName.toLowerCase();
    
    // 1. –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º UUID —Å–µ—Ä–≤–∏—Å–æ–≤ (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π —Å–ø–æ—Å–æ–±)
    final typeByServices = _getDeviceTypeByServices(serviceUuids);
    if (typeByServices != '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') {
      return typeByServices;
    }
    
    // 2. –ó–∞—Ç–µ–º –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–º–µ–Ω
    if (_isPhone(name)) return '–¢–µ–ª–µ—Ñ–æ–Ω';
    if (_isAudioDevice(name)) return '–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    if (_isComputer(name)) return '–ö–æ–º–ø—å—é—Ç–µ—Ä';
    if (_isGamingDevice(name)) return '–ò–≥—Ä–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    if (_isCar(name)) return '–ê–≤—Ç–æ–º–æ–±–∏–ª—å';
    if (_isWearableDevice(name)) return '–ù–æ—Å–∏–º—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞';
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–∏–ø—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    if (name.contains('–∞—É–¥–∏–æ')) return '–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    if (name.contains('—Ñ–∏—Ç–Ω–µ—Å')) return '–§–∏—Ç–Ω–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    if (name.contains('–≤–≤–æ–¥')) return '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞';
    if (name.contains('–±–∞—Ç–∞—Ä–µ—è')) return '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –±–∞—Ç–∞—Ä–µ–µ–π';
    
    return 'Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
  }

  String _getDeviceTypeByServices(List<String> serviceUuids) {
    final uuidStrings = serviceUuids.map((uuid) => uuid.toLowerCase()).toList();
    
    // –ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (uuidStrings.any((uuid) => 
        uuid.contains('110b') || // Audio Source
        uuid.contains('110e') || // Audio Sink
        uuid.contains('110a')    // Advanced Audio Distribution
    )) {
      return '–ê—É–¥–∏–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    }
    
    // –§–∏—Ç–Ω–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    if (uuidStrings.any((uuid) => 
        uuid.contains('180d') || // Heart Rate
        uuid.contains('1814') || // Environmental Sensing
        uuid.contains('181c')    // User Data
    )) {
      return '–§–∏—Ç–Ω–µ—Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
    }
    
    // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤–≤–æ–¥–∞
    if (uuidStrings.any((uuid) => 
        uuid.contains('1812') || // Human Interface Device
        uuid.contains('1124')    // HID over GATT
    )) {
      return '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–≤–æ–¥–∞';
    }
    
    // –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –±–∞—Ç–∞—Ä–µ–µ–π
    if (uuidStrings.any((uuid) => 
        uuid.contains('180f')    // Battery Service
    )) {
      return '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Å –±–∞—Ç–∞—Ä–µ–µ–π';
    }
    
    return 'Bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
  }

  void _updateDeviceList() {
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º BLE –∏ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    final allDevices = <BluetoothDeviceEntity>[];
    allDevices.addAll(_discoveredDevicesMap.values);
    allDevices.addAll(_classicDevicesMap.values);
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ MAC-–∞–¥—Ä–µ—Å—É (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤)
    final uniqueDevices = <String, BluetoothDeviceEntity>{};
    
    // –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    for (final device in _classicDevicesMap.values) {
      uniqueDevices[device.id] = device;
    }
    
    // –ó–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–æ–Ω–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—à—É—Ç –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —Å —Ç–µ–º –∂–µ MAC)
    for (final device in _discoveredDevicesMap.values) {
      uniqueDevices[device.id] = device;
    }
    
    final finalDevices = uniqueDevices.values.toList();
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
    finalDevices.sort((a, b) {
      // –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–µ
      if (a.isConnected && !b.isConnected) return -1;
      if (!a.isConnected && b.isConnected) return 1;
      
      // –ó–∞—Ç–µ–º –ø–æ —Ç–∏–ø—É (BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ)
      if (a.isClassicBluetooth != b.isClassicBluetooth) {
        return a.isClassicBluetooth ? 1 : -1;
      }
      
      // –ó–∞—Ç–µ–º –ø–æ —Å–∏–ª–µ —Å–∏–≥–Ω–∞–ª–∞ (–±–æ–ª—å—à–µ RSSI = –±–ª–∏–∂–µ)
      return b.rssi.compareTo(a.rssi);
    });
    
    _devicesController.add(finalDevices);
    
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ —É—Å—Ç—Ä–æ–π—Å—Ç–≤
  bool _isPhone(String name) {
    final phonePatterns = [
      'iphone', 'samsung', 'galaxy', 'note', 'pixel', 'xiaomi', 'huawei', 'oneplus',
      'oppo', 'vivo', 'realme', 'motorola', 'lg', 'sony', 'nokia', 'htc',
      'phone', 'mobile', 'smartphone', 'android', 'ios'
    ];
    return phonePatterns.any((pattern) => name.contains(pattern));
  }

  bool _isAudioDevice(String name) {
    final audioPatterns = [
      'jbl', 'bose', 'sony', 'sennheiser', 'audio', 'speaker', 'headphone', 'headset',
      'earphone', 'earbud', 'airpods', 'beats', 'harman', 'marshall', 'jabra',
      'sound', 'music', 'bluetooth', 'wireless', '–∫–æ–ª–æ–Ω–∫–∞', '–Ω–∞—É—à–Ω–∏–∫–∏'
    ];
    return audioPatterns.any((pattern) => name.contains(pattern));
  }

  bool _isComputer(String name) {
    final computerPatterns = [
      'macbook', 'mac', 'laptop', 'notebook', 'pc', 'computer', 'desktop',
      'windows', 'linux', 'ubuntu', 'thinkpad', 'dell', 'hp', 'lenovo',
      'asus', 'acer', 'msi', 'gigabyte', '–∫–æ–º–ø—å—é—Ç–µ—Ä', '–Ω–æ—É—Ç–±—É–∫'
    ];
    return computerPatterns.any((pattern) => name.contains(pattern));
  }

  bool _isGamingDevice(String name) {
    final gamingPatterns = [
      'xbox', 'playstation', 'ps4', 'ps5', 'nintendo', 'switch', 'steam',
      'gaming', 'game', 'controller', 'joystick', 'pad', '–∏–≥—Ä–∞', '–≥–µ–π–º–ø–∞–¥'
    ];
    return gamingPatterns.any((pattern) => name.contains(pattern));
  }

  bool _isCar(String name) {
    final carPatterns = [
      'car', 'auto', 'vehicle', 'bmw', 'mercedes', 'audi', 'toyota', 'honda',
      'ford', 'chevrolet', 'nissan', 'hyundai', 'kia', 'volkswagen', 'skoda',
      '–∞–≤—Ç–æ', '–º–∞—à–∏–Ω–∞', '–∞–≤—Ç–æ–º–æ–±–∏–ª—å'
    ];
    return carPatterns.any((pattern) => name.contains(pattern));
  }

  bool _isWearableDevice(String name) {
    final wearablePatterns = [
      'watch', 'band', 'fitness', 'tracker', 'mi band', 'apple watch', 'galaxy watch',
      'fitbit', 'garmin', 'huawei band', 'amazfit', 'wear', 'smartwatch',
      '–±—Ä–∞—Å–ª–µ—Ç', '—á–∞—Å—ã', '—Ñ–∏—Ç–Ω–µ—Å', '—Ç—Ä–µ–∫–µ—Ä'
    ];
    return wearablePatterns.any((pattern) => name.contains(pattern));
  }

  @override
  Future<void> stopScan() async {
    try {
      await FlutterBluePlus.stopScan();
      await _scanResultsSubscription?.cancel();
      await _classicBluetoothSubscription?.cancel();
      _scanResultsSubscription = null;
      _classicBluetoothSubscription = null;
      // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      final totalDevices = _discoveredDevicesMap.length + _classicDevicesMap.length;
      _addLog(LogLevel.info, '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤: $totalDevices');
      
      // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤
      if (totalDevices > 0) {
        _addLog(LogLevel.info, '=== –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ===');
        
        // BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for (final device in _discoveredDevicesMap.values) {
          _addLog(LogLevel.info, '‚Ä¢ ${device.name} (${device.deviceType}) - RSSI: ${device.rssi} dBm');
        }
        
        // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        for (final device in _classicDevicesMap.values) {
          _addLog(LogLevel.info, '‚Ä¢ ${device.name} (${device.deviceType}) - Classic Bluetooth');
        }
        
        _addLog(LogLevel.info, '================================');
      }
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: $e');
    }
  }

  @override
  Future<bool> connectToDevice(String deviceId) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –ª–æ–≥–æ–≤
      final deviceInfo = _discoveredDevicesMap[deviceId];
      final deviceName = deviceInfo?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
      
      _addLog(LogLevel.info, '–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ "$deviceName"');
      
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
      await FlutterBluePlus.stopScan();
      
      // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
      await Future.delayed(const Duration(milliseconds: 500));
      
      // –°–æ–∑–¥–∞–µ–º BluetoothDevice –∏–∑ ID
      final device = BluetoothDevice.fromId(deviceId);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –ª–∏ —É–∂–µ
      if (device.isConnected) {
        _addLog(LogLevel.info, '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "$deviceName" —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
        return true;
      }
      
      // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º –∏ –±–µ–∑ autoConnect
      await device.connect(
        timeout: const Duration(seconds: 30),
        autoConnect: false,
      );
      
      // –ñ–¥–µ–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
      await Future.delayed(const Duration(milliseconds: 1000));
      
      if (device.isConnected) {
        _addLog(LogLevel.info, '‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ "$deviceName"');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        _connectedDevices[deviceId] = device;
        
        // –°–ª—É—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        device.connectionState.listen((state) {
          if (state == BluetoothConnectionState.disconnected) {
            _addLog(LogLevel.warning, '‚ùå –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "$deviceName" –æ—Ç–∫–ª—é—á–µ–Ω–æ');
            _connectedDevices.remove(deviceId);
          }
        });
        
        // –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        _startDataCollection(device, deviceName);
        
        return true;
      } else {
        _addLog(LogLevel.error, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ "$deviceName"');
        return false;
      }
      
    } catch (e) {
      final deviceInfo = _discoveredDevicesMap[deviceId];
      final deviceName = deviceInfo?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ—à–∏–±–∫–∏ Android
      String errorMessage = e.toString();
      if (errorMessage.contains('133')) {
        errorMessage = '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–∫–æ–¥ 133). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Bluetooth.';
      } else if (errorMessage.contains('connection timeout')) {
        errorMessage = '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è. –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.';
      }
      
      _addLog(LogLevel.error, '‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ "$deviceName": $errorMessage');
      return false;
    }
  }

  /// –ù–∞—á–∏–Ω–∞–µ—Ç —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  Future<void> _startDataCollection(BluetoothDevice device, String deviceName) async {
    try {
      _addLog(LogLevel.info, 'üì° –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å "$deviceName"');
      
      // –û–±–Ω–∞—Ä—É–∂–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
      final services = await device.discoverServices();
      _addLog(LogLevel.info, 'üîç –ù–∞–π–¥–µ–Ω–æ ${services.length} —Å–µ—Ä–≤–∏—Å–æ–≤ –Ω–∞ "$deviceName"');
      
      for (var service in services) {
        _addLog(LogLevel.debug, '   –°–µ—Ä–≤–∏—Å: ${service.uuid}');
        
        for (var characteristic in service.characteristics) {
          try {
            // –ß–∏—Ç–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç —á—Ç–µ–Ω–∏–µ
            if (characteristic.properties.read) {
              final value = await characteristic.read();
              _addLog(LogLevel.info, 'üìä –î–∞–Ω–Ω—ã–µ –æ—Ç "$deviceName" (${characteristic.uuid}): ${value.length} –±–∞–π—Ç');
            }
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            if (characteristic.properties.notify) {
              await characteristic.setNotifyValue(true);
              characteristic.lastValueStream.listen((value) {
                _addLog(LogLevel.info, 'üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç "$deviceName" (${characteristic.uuid}): ${value.length} –±–∞–π—Ç');
              });
              _addLog(LogLevel.info, 'üîî –ü–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç "$deviceName" (${characteristic.uuid})');
            }
          } catch (e) {
            _addLog(LogLevel.warning, '‚ö†Ô∏è –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ ${characteristic.uuid}: $e');
          }
        }
      }
    } catch (e) {
      _addLog(LogLevel.error, '‚ùå –û—à–∏–±–∫–∞ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö —Å "$deviceName": $e');
    }
  }

  Future<bool> _hybridConnectToDevice(String deviceId) async {
    _addLog(LogLevel.info, '–ü–æ–ø—ã—Ç–∫–∞ –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: $deviceId');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ BLE –∫–∞—Ä—Ç–µ
    final bleDevice = _discoveredDevicesMap[deviceId];
    final classicDevice = _classicDevicesMap[deviceId];
    
    bool bleSuccess = false;
    bool classicSuccess = false;
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ BLE
    if (bleDevice != null && !bleDevice.isClassicBluetooth) {
      _addLog(LogLevel.info, 'üîµ –ü–æ–ø—ã—Ç–∫–∞ BLE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: ${bleDevice.name}');
      bleSuccess = await _connectWithRetry(deviceId, maxRetries: 2);
      if (bleSuccess) {
        _addLog(LogLevel.info, '‚úÖ BLE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
        return true;
      }
    }
    
    // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π Bluetooth
    if (classicDevice != null && classicDevice.isClassicBluetooth) {
      _addLog(LogLevel.info, 'üî¥ –ü–æ–ø—ã—Ç–∫–∞ Classic –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: ${classicDevice.name}');
      classicSuccess = await _connectClassicBluetooth(deviceId);
      if (classicSuccess) {
        _addLog(LogLevel.info, '‚úÖ Classic –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ');
        return true;
      }
    }
    
    // –ï—Å–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –æ–¥–Ω–æ–π –∫–∞—Ä—Ç–µ, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º
    if (!bleSuccess && !classicSuccess) {
      if (bleDevice != null) {
        _addLog(LogLevel.info, 'üîÑ –ü–æ–ø—ã—Ç–∫–∞ Classic –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ BLE —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: ${bleDevice.name}');
        classicSuccess = await _connectClassicBluetooth(deviceId);
      } else if (classicDevice != null) {
        _addLog(LogLevel.info, 'üîÑ –ü–æ–ø—ã—Ç–∫–∞ BLE –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Classic —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: ${classicDevice.name}');
        bleSuccess = await _connectWithRetry(deviceId, maxRetries: 2);
      }
    }
    
    final success = bleSuccess || classicSuccess;
    if (!success) {
      _addLog(LogLevel.error, '‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∏ —á–µ—Ä–µ–∑ BLE, –Ω–∏ —á–µ—Ä–µ–∑ Classic');
    }
    
    return success;
  }

  Future<bool> _connectClassicBluetooth(String deviceId) async {
    try {
      // –ò—â–µ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ MAC-–∞–¥—Ä–µ—Å—É
      final bondedDevices = await classic.FlutterBluetoothSerial.instance.getBondedDevices();
      classic.BluetoothDevice? targetDevice;
      
      for (final device in bondedDevices) {
        if (device.address == deviceId) {
          targetDevice = device;
          break;
        }
      }
      
      if (targetDevice == null) {
        _addLog(LogLevel.warning, 'Classic —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—Ä–µ–¥–∏ —Å–æ–ø—Ä—è–∂–µ–Ω–Ω—ã—Ö: $deviceId');
        return false;
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
      final connection = await classic.BluetoothConnection.toAddress(deviceId);
      if (connection.isConnected) {
        _addLog(LogLevel.info, 'Classic Bluetooth –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        
        // –ü–æ–ª—É—á–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        await _getClassicDeviceInfo(targetDevice, connection);
        
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        connection.dispose();
        return true;
      }
      
      return false;
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ Classic Bluetooth –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      return false;
    }
  }

  Future<void> _getClassicDeviceInfo(classic.BluetoothDevice device, classic.BluetoothConnection connection) async {
    try {
      _addLog(LogLevel.info, 'üìã === –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û CLASSIC –£–°–¢–†–û–ô–°–¢–í–ï ===');
      _addLog(LogLevel.info, '‚Ä¢ –ò–º—è: ${device.name}');
      _addLog(LogLevel.info, '‚Ä¢ –ê–¥—Ä–µ—Å: ${device.address}');
      _addLog(LogLevel.info, '‚Ä¢ –¢–∏–ø: ${device.type}');
      _addLog(LogLevel.info, '‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: ${connection.isConnected}');
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
      if (connection.isConnected) {
        _addLog(LogLevel.info, '‚Ä¢ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ');
        
        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É
        // –Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–ø—Ä–æ—Å—ã AT –∫–æ–º–∞–Ω–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
      }
      
    } catch (e) {
      _addLog(LogLevel.warning, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Classic —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: $e');
    }
  }

  Future<bool> _connectWithRetry(String deviceId, {int maxRetries = 3}) async {
    for (int attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      final device = BluetoothDevice.fromId(deviceId);
        final deviceName = device.platformName.isNotEmpty ? device.platformName : deviceId;
        
        _addLog(LogLevel.info, '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: $deviceName (–ø–æ–ø—ã—Ç–∫–∞ $attempt/$maxRetries)');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ Bluetooth –∞–¥–∞–ø—Ç–µ—Ä–∞
        if (!await isBluetoothAvailable()) {
          _addLog(LogLevel.error, 'Bluetooth –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
          return false;
        }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –ª–∏ —É–∂–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      if (device.isConnected) {
          _addLog(LogLevel.info, '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: $deviceName');
        _connectedDevices[deviceId] = device;
          _setupDeviceListeners(device);
        return true;
      }
      
        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É –∏ –æ—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (attempt > 1) {
          _addLog(LogLevel.info, '–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...');
          await Future.delayed(Duration(seconds: attempt * 2));
          
          // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          try {
            if (device.isConnected) {
              await device.disconnect();
              await Future.delayed(const Duration(milliseconds: 500));
            }
          } catch (e) {
            _addLog(LogLevel.debug, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
          }
        }

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º
      await device.connect(
          timeout: Duration(seconds: 15 + (attempt * 5)), // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
          autoConnect: false,
        );

        // –ñ–¥–µ–º —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        await Future.delayed(const Duration(milliseconds: 1000));

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        if (device.isConnected) {
      _connectedDevices[deviceId] = device;
          _setupDeviceListeners(device);
          
          _addLog(LogLevel.info, '–£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: $deviceName');
          
          // –ï—Å–ª–∏ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å—Ç–∞–ª–æ –¥–æ—Å—Ç—É–ø–Ω—ã–º –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
          if (device.platformName.isNotEmpty && device.platformName != deviceName) {
            _addLog(LogLevel.info, '–ò–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: "${device.platformName}"');
          }
      
      return true;
        }

        // –ï—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –Ω–æ —ç—Ç–æ –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
        if (attempt < maxRetries) {
          _addLog(LogLevel.warning, '–ü–æ–ø—ã—Ç–∫–∞ $attempt –Ω–µ —É–¥–∞–ª–∞—Å—å, –ø–æ–≤—Ç–æ—Ä—è–µ–º...');
          continue;
        }

    } on FlutterBluePlusException catch (e) {
        final errorMessage = _parseBluetoothError(e);
      
        if (attempt < maxRetries) {
          _addLog(LogLevel.warning, '–ü–æ–ø—ã—Ç–∫–∞ $attempt –Ω–µ —É–¥–∞–ª–∞—Å—å: $errorMessage. –ü–æ–≤—Ç–æ—Ä—è–µ–º...');
          
          // –î–ª—è –æ—à–∏–±–∫–∏ 133 –¥–µ–ª–∞–µ–º –±–æ–ª–µ–µ –¥–ª–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É
      if (e.toString().contains('android-code: 133')) {
            await Future.delayed(Duration(seconds: attempt * 3));
      }
          continue;
        } else {
          _addLog(LogLevel.error, '–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã: $errorMessage');
      return false;
        }
    } catch (e) {
        final errorMessage = _parseBluetoothError(e);
        
        if (attempt < maxRetries) {
          _addLog(LogLevel.warning, '–ü–æ–ø—ã—Ç–∫–∞ $attempt –Ω–µ —É–¥–∞–ª–∞—Å—å: $errorMessage. –ü–æ–≤—Ç–æ—Ä—è–µ–º...');
          continue;
        } else {
          _addLog(LogLevel.error, '–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã: $errorMessage');
      return false;
        }
      }
    }

    _addLog(LogLevel.error, '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É –ø–æ—Å–ª–µ $maxRetries –ø–æ–ø—ã—Ç–æ–∫');
    return false;
  }

  String _parseBluetoothError(dynamic error) {
    final errorString = error.toString().toLowerCase();
    
    if (errorString.contains('android-code: 133') || errorString.contains('gatt_error')) {
      return 'GATT Error (133) - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –∏–ª–∏ –∑–∞–Ω—è—Ç–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n'
          '‚Ä¢ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∫–ª—é—á–µ–Ω–æ –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —Ä—è–¥–æ–º\n'
          '‚Ä¢ –ó–∞–∫—Ä–æ–π—Ç–µ –¥—Ä—É–≥–∏–µ Bluetooth –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n'
          '‚Ä¢ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ Bluetooth –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n'
          '‚Ä¢ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ "–∑–∞–±—ã—Ç—å" —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Bluetooth –∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∑–∞–Ω–æ–≤–æ';
    } else if (errorString.contains('timeout')) {
      return '–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏';
    } else if (errorString.contains('connection')) {
      return '–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞';
    } else if (errorString.contains('permission')) {
      return '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è';
    } else if (errorString.contains('bluetooth')) {
      return '–û—à–∏–±–∫–∞ Bluetooth - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–∞–ø—Ç–µ—Ä–∞';
    } else {
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: $error';
    }
  }

  void _setupDeviceListeners(BluetoothDevice device) {
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    device.connectionState.listen((state) {
      final deviceName = device.platformName.isNotEmpty ? device.platformName : device.remoteId.toString();
      
      if (state == BluetoothConnectionState.disconnected) {
        _addLog(LogLevel.warning, '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å: $deviceName');
        _connectedDevices.remove(device.remoteId.toString());
      } else if (state == BluetoothConnectionState.connected) {
        _addLog(LogLevel.info, '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: $deviceName');
        _connectedDevices[device.remoteId.toString()] = device;
        
        // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        _discoverDeviceServices(device);
      }
    }).onError((error) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $error');
    });
  }

  void _discoverDeviceServices(BluetoothDevice device) {
    if (device.isConnected) {
      device.discoverServices().then((services) {
        final deviceName = device.platformName.isNotEmpty ? device.platformName : device.remoteId.toString();
        _addLog(LogLevel.info, '–ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${services.length} –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ $deviceName');
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
        _performFullDeviceDiagnostics(device, services);
      }).catchError((e) {
        _addLog(LogLevel.warning, '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: $e');
      });
    }
  }

  Future<void> _performFullDeviceDiagnostics(BluetoothDevice device, List<BluetoothService> services) async {
    final deviceName = device.platformName.isNotEmpty ? device.platformName : device.remoteId.toString();
    
    _addLog(LogLevel.info, 'üîç === –ü–û–õ–ù–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –£–°–¢–†–û–ô–°–¢–í–ê: $deviceName ===');
    
    // 1. –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
    _addLog(LogLevel.info, 'üì± –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:');
    _addLog(LogLevel.info, '   ‚Ä¢ ID: ${device.remoteId}');
    _addLog(LogLevel.info, '   ‚Ä¢ –ò–º—è: ${device.platformName}');
    _addLog(LogLevel.info, '   ‚Ä¢ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ: ${device.isConnected}');
    _addLog(LogLevel.info, '   ‚Ä¢ –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${device.connectionState}');
    
    // 2. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    try {
      _addLog(LogLevel.info, 'üì° –†–ï–ö–õ–ê–ú–ù–´–ï –î–ê–ù–ù–´–ï:');
      _addLog(LogLevel.info, '   ‚Ä¢ Local Name: ${device.platformName}');
      _addLog(LogLevel.info, '   ‚Ä¢ TX Power Level: ${device.platformName}'); // –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ
    } catch (e) {
      _addLog(LogLevel.debug, '   ‚Ä¢ –†–µ–∫–ª–∞–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã: $e');
    }
    
    // 3. –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ—Ä–≤–∏—Å–∞—Ö
    _addLog(LogLevel.info, 'üîß –°–ï–†–í–ò–°–´ (${services.length}):');
    for (int i = 0; i < services.length; i++) {
      final service = services[i];
      final serviceName = _getServiceName(service.uuid.toString());
      _addLog(LogLevel.info, '   ${i + 1}. ${service.uuid}');
      if (serviceName.isNotEmpty) {
        _addLog(LogLevel.info, '       ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: $serviceName');
      }
      
      // –ü–æ–ª—É—á–∞–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
      try {
        final characteristics = service.characteristics;
        _addLog(LogLevel.info, '      –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ (${characteristics.length}):');
        
        for (int j = 0; j < characteristics.length; j++) {
          final char = characteristics[j];
          final charName = _getCharacteristicName(char.uuid.toString());
          _addLog(LogLevel.info, '        ${j + 1}. ${char.uuid}');
          if (charName.isNotEmpty) {
            _addLog(LogLevel.info, '           ‚Ä¢ –ù–∞–∑–≤–∞–Ω–∏–µ: $charName');
          }
          _addLog(LogLevel.info, '           ‚Ä¢ –°–≤–æ–π—Å—Ç–≤–∞: ${_getCharacteristicProperties(char)}');
          _addLog(LogLevel.info, '           ‚Ä¢ –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã: ${char.descriptors.length}');
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è GATT –æ—à–∏–±–æ–∫
          await Future.delayed(const Duration(milliseconds: 100));
          
          // –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã
          await _analyzeCharacteristicDescriptors(device, char);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
          await Future.delayed(const Duration(milliseconds: 100));
          
          // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
          await _readCharacteristicValue(device, char);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –æ–ø–µ—Ä–∞—Ü–∏—è–º–∏
          await Future.delayed(const Duration(milliseconds: 100));
          
          // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          await _subscribeToCharacteristic(device, char);
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞–º–∏
          await Future.delayed(const Duration(milliseconds: 200));
        }
      } catch (e) {
        _addLog(LogLevel.warning, '      –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫: $e');
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–µ—Ä–≤–∏—Å–∞–º–∏
      await Future.delayed(const Duration(milliseconds: 300));
    }
    
    // 4. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
    _addLog(LogLevel.info, 'üè≠ –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–ï:');
    _addLog(LogLevel.info, '   ‚Ä¢ –î–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ BLE API');
    
    // 5. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    _addLog(LogLevel.info, 'üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø:');
    _addLog(LogLevel.info, '   ‚Ä¢ –í—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${DateTime.now()}');
    _addLog(LogLevel.info, '   ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${services.length}');
    
    _addLog(LogLevel.info, '‚úÖ === –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê ===');
  }

  String _getServiceName(String uuid) {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã Bluetooth
    final standardServices = {
      '00001800-0000-1000-8000-00805f9b34fb': 'Generic Access',
      '00001801-0000-1000-8000-00805f9b34fb': 'Generic Attribute',
      '00001802-0000-1000-8000-00805f9b34fb': 'Immediate Alert',
      '00001803-0000-1000-8000-00805f9b34fb': 'Link Loss',
      '00001804-0000-1000-8000-00805f9b34fb': 'Tx Power',
      '00001805-0000-1000-8000-00805f9b34fb': 'Current Time Service',
      '00001806-0000-1000-8000-00805f9b34fb': 'Reference Time Update Service',
      '00001807-0000-1000-8000-00805f9b34fb': 'Next DST Change Service',
      '00001808-0000-1000-8000-00805f9b34fb': 'Glucose',
      '00001809-0000-1000-8000-00805f9b34fb': 'Health Thermometer',
      '0000180a-0000-1000-8000-00805f9b34fb': 'Device Information',
      '0000180b-0000-1000-8000-00805f9b34fb': 'Heart Rate',
      '0000180c-0000-1000-8000-00805f9b34fb': 'Phone Alert Status Service',
      '0000180d-0000-1000-8000-00805f9b34fb': 'Battery Service',
      '0000180e-0000-1000-8000-00805f9b34fb': 'Blood Pressure',
      '0000180f-0000-1000-8000-00805f9b34fb': 'Alert Notification Service',
      '00001810-0000-1000-8000-00805f9b34fb': 'Human Interface Device',
      '00001811-0000-1000-8000-00805f9b34fb': 'Scan Parameters',
      '00001812-0000-1000-8000-00805f9b34fb': 'Running Speed and Cadence',
      '00001813-0000-1000-8000-00805f9b34fb': 'Automation IO',
      '00001814-0000-1000-8000-00805f9b34fb': 'Audio Input Control',
      '00001815-0000-1000-8000-00805f9b34fb': 'Audio Stream Control',
      '00001816-0000-1000-8000-00805f9b34fb': 'Volume Control',
      '00001817-0000-1000-8000-00805f9b34fb': 'Volume Offset Control',
      '00001818-0000-1000-8000-00805f9b34fb': 'Volume Control Service',
      '00001819-0000-1000-8000-00805f9b34fb': 'Weight Scale',
      '0000181a-0000-1000-8000-00805f9b34fb': 'Weight Scale Service',
      '0000181b-0000-1000-8000-00805f9b34fb': 'Cycling Power',
      '0000181c-0000-1000-8000-00805f9b34fb': 'Cycling Speed and Cadence',
      '0000181d-0000-1000-8000-00805f9b34fb': 'Location and Navigation',
      '0000181e-0000-1000-8000-00805f9b34fb': 'Environmental Sensing',
      '0000181f-0000-1000-8000-00805f9b34fb': 'Body Composition',
      '00001820-0000-1000-8000-00805f9b34fb': 'User Data',
      '00001821-0000-1000-8000-00805f9b34fb': 'Weight Scale',
      '00001822-0000-1000-8000-00805f9b34fb': 'Fitness Machine',
      '00001823-0000-1000-8000-00805f9b34fb': 'Mesh Provisioning Service',
      '00001824-0000-1000-8000-00805f9b34fb': 'Mesh Proxy Service',
      '00001825-0000-1000-8000-00805f9b34fb': 'Reconnection Configuration',
      '00001826-0000-1000-8000-00805f9b34fb': 'Fitness Machine Control Point',
      '00001827-0000-1000-8000-00805f9b34fb': 'Fitness Machine Feature',
      '00001828-0000-1000-8000-00805f9b34fb': 'Fitness Machine Status',
      '00001829-0000-1000-8000-00805f9b34fb': 'Fitness Machine Control Point',
      '0000182a-0000-1000-8000-00805f9b34fb': 'Fitness Machine Feature',
      '0000182b-0000-1000-8000-00805f9b34fb': 'Fitness Machine Status',
    };
    
    final uuidLower = uuid.toLowerCase();
    return standardServices[uuidLower] ?? '';
  }

  String _getCharacteristicName(String uuid) {
    // –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ Bluetooth
    final standardCharacteristics = {
      '00002a00-0000-1000-8000-00805f9b34fb': 'Device Name',
      '00002a01-0000-1000-8000-00805f9b34fb': 'Appearance',
      '00002a02-0000-1000-8000-00805f9b34fb': 'Peripheral Privacy Flag',
      '00002a03-0000-1000-8000-00805f9b34fb': 'Reconnection Address',
      '00002a04-0000-1000-8000-00805f9b34fb': 'Peripheral Preferred Connection Parameters',
      '00002a05-0000-1000-8000-00805f9b34fb': 'Service Changed',
      '00002a06-0000-1000-8000-00805f9b34fb': 'Alert Level',
      '00002a07-0000-1000-8000-00805f9b34fb': 'Tx Power Level',
      '00002a08-0000-1000-8000-00805f9b34fb': 'Date Time',
      '00002a09-0000-1000-8000-00805f9b34fb': 'Day of Week',
      '00002a0a-0000-1000-8000-00805f9b34fb': 'Day Date Time',
      '00002a0b-0000-1000-8000-00805f9b34fb': 'Exact Time 100',
      '00002a0c-0000-1000-8000-00805f9b34fb': 'Exact Time 256',
      '00002a0d-0000-1000-8000-00805f9b34fb': 'DST Offset',
      '00002a0e-0000-1000-8000-00805f9b34fb': 'Time Zone',
      '00002a0f-0000-1000-8000-00805f9b34fb': 'Local Time Information',
      '00002a10-0000-1000-8000-00805f9b34fb': 'Secondary Time Zone',
      '00002a11-0000-1000-8000-00805f9b34fb': 'Time with DST',
      '00002a12-0000-1000-8000-00805f9b34fb': 'Time Accuracy',
      '00002a13-0000-1000-8000-00805f9b34fb': 'Time Source',
      '00002a14-0000-1000-8000-00805f9b34fb': 'Reference Time Information',
      '00002a15-0000-1000-8000-00805f9b34fb': 'Time Broadcast',
      '00002a16-0000-1000-8000-00805f9b34fb': 'Time Update Control Point',
      '00002a17-0000-1000-8000-00805f9b34fb': 'Time Update State',
      '00002a18-0000-1000-8000-00805f9b34fb': 'Le Time',
      '00002a19-0000-1000-8000-00805f9b34fb': 'Temperature',
      '00002a1a-0000-1000-8000-00805f9b34fb': 'Temperature Type',
      '00002a1b-0000-1000-8000-00805f9b34fb': 'Intermediate Temperature',
      '00002a1c-0000-1000-8000-00805f9b34fb': 'Temperature in Celsius',
      '00002a1d-0000-1000-8000-00805f9b34fb': 'Temperature in Fahrenheit',
      '00002a1e-0000-1000-8000-00805f9b34fb': 'Temperature Range',
      '00002a1f-0000-1000-8000-00805f9b34fb': 'Temperature Measurement',
      '00002a20-0000-1000-8000-00805f9b34fb': 'Temperature Type',
      '00002a21-0000-1000-8000-00805f9b34fb': 'Intermediate Temperature',
      '00002a22-0000-1000-8000-00805f9b34fb': 'Measurement Interval',
      '00002a23-0000-1000-8000-00805f9b34fb': 'Boot Keyboard Input Report',
      '00002a24-0000-1000-8000-00805f9b34fb': 'System ID',
      '00002a25-0000-1000-8000-00805f9b34fb': 'Model Number String',
      '00002a26-0000-1000-8000-00805f9b34fb': 'Serial Number String',
      '00002a27-0000-1000-8000-00805f9b34fb': 'Firmware Revision String',
      '00002a28-0000-1000-8000-00805f9b34fb': 'Hardware Revision String',
      '00002a29-0000-1000-8000-00805f9b34fb': 'Software Revision String',
      '00002a2a-0000-1000-8000-00805f9b34fb': 'Manufacturer Name String',
      '00002a2b-0000-1000-8000-00805f9b34fb': 'IEEE 11073-20601 Regulatory Certification Data List',
      '00002a2c-0000-1000-8000-00805f9b34fb': 'Current Time',
      '00002a2d-0000-1000-8000-00805f9b34fb': 'Magnetic Declination',
      '00002a2e-0000-1000-8000-00805f9b34fb': 'Scan Refresh',
      '00002a2f-0000-1000-8000-00805f9b34fb': 'Boot Keyboard Output Report',
      '00002a30-0000-1000-8000-00805f9b34fb': 'Boot Mouse Input Report',
      '00002a31-0000-1000-8000-00805f9b34fb': 'Glucose Measurement',
      '00002a32-0000-1000-8000-00805f9b34fb': 'Battery Level',
      '00002a33-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a34-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a35-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a36-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a37-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a38-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a39-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a3a-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a3b-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a3c-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a3d-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a3e-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a3f-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a40-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a41-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a42-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a43-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a44-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a45-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a46-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a47-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a48-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a49-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a4a-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a4b-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a4c-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a4d-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a4e-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a4f-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a50-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a51-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a52-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a53-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a54-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a55-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a56-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a57-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a58-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a59-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a5a-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a5b-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a5c-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a5d-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a5e-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a5f-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a60-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a61-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a62-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a63-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a64-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a65-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a66-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a67-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a68-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a69-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a6a-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a6b-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a6c-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a6d-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a6e-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a6f-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a70-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a71-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a72-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a73-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a74-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a75-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a76-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a77-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a78-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a79-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a7a-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a7b-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a7c-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a7d-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a7e-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a7f-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a80-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a81-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a82-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a83-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a84-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a85-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a86-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a87-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a88-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a89-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a8a-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a8b-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a8c-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a8d-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a8e-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a8f-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a90-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a91-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a92-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a93-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a94-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a95-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a96-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a97-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a98-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a99-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a9a-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a9b-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a9c-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a9d-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002a9e-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002a9f-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aa0-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002aa1-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aa2-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002aa3-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aa4-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002aa5-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aa6-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002aa7-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aa8-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002aa9-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aaa-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002aab-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aac-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002aad-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aae-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002aaf-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ab0-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ab1-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ab2-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ab3-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ab4-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ab5-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ab6-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ab7-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ab8-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ab9-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aba-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002abb-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002abc-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002abd-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002abe-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002abf-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ac0-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ac1-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ac2-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ac3-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ac4-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ac5-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ac6-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ac7-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ac8-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ac9-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aca-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002acb-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002acc-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002acd-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ace-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002acf-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ad0-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ad1-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ad2-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ad3-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ad4-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ad5-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ad6-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ad7-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ad8-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ad9-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ada-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002adb-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002adc-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002add-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ade-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002adf-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ae0-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ae1-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ae2-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ae3-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ae4-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ae5-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ae6-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ae7-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002ae8-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002ae9-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aea-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002aeb-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aec-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002aed-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002aee-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002aef-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002af0-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002af1-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002af2-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002af3-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002af4-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002af5-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002af6-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002af7-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002af8-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002af9-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002afa-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002afb-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002afc-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002afd-0000-1000-8000-00805f9b34fb': 'Battery Power State',
      '00002afe-0000-1000-8000-00805f9b34fb': 'Battery Level State',
      '00002aff-0000-1000-8000-00805f9b34fb': 'Battery Power State',
    };
    
    final uuidLower = uuid.toLowerCase();
    return standardCharacteristics[uuidLower] ?? '';
  }

  String _getCharacteristicProperties(BluetoothCharacteristic characteristic) {
    final properties = <String>[];
    
    if (characteristic.properties.read) properties.add('READ');
    if (characteristic.properties.write) properties.add('WRITE');
    if (characteristic.properties.writeWithoutResponse) properties.add('WRITE_NO_RESPONSE');
    if (characteristic.properties.notify) properties.add('NOTIFY');
    if (characteristic.properties.indicate) properties.add('INDICATE');
    if (characteristic.properties.broadcast) properties.add('BROADCAST');
    if (characteristic.properties.authenticatedSignedWrites) properties.add('AUTH_SIGNED_WRITES');
    if (characteristic.properties.extendedProperties) properties.add('EXTENDED_PROPERTIES');
    
    return properties.isEmpty ? '–ù–ï–¢' : properties.join(', ');
  }

  Future<void> _readCharacteristicValue(BluetoothDevice device, BluetoothCharacteristic characteristic) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Å–µ –µ—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
      if (!device.isConnected) {
        _addLog(LogLevel.debug, '           ‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —á—Ç–µ–Ω–∏–µ');
        return;
      }
      
      if (characteristic.properties.read) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —á—Ç–µ–Ω–∏—è
        final value = await characteristic.read().timeout(
          const Duration(seconds: 5),
          onTimeout: () {
            throw Exception('–¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏');
          },
        );
        
        if (value.isNotEmpty) {
          final hexValue = value.map((byte) => byte.toRadixString(16).padLeft(2, '0')).join(' ');
          final stringValue = String.fromCharCodes(value.where((byte) => byte >= 32 && byte <= 126));
          
          _addLog(LogLevel.info, '           ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ (HEX): $hexValue');
          if (stringValue.isNotEmpty) {
            _addLog(LogLevel.info, '           ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ (TEXT): "$stringValue"');
          }
        } else {
          _addLog(LogLevel.info, '           ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ: –ü–£–°–¢–û–ï');
        }
      }
    } catch (e) {
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
      if (e.toString().contains('201') || e.toString().contains('WRITE_REQUEST_BUSY')) {
        _addLog(LogLevel.debug, '           ‚Ä¢ GATT –∑–∞–Ω—è—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —á—Ç–µ–Ω–∏–µ');
      } else if (e.toString().contains('timeout')) {
        _addLog(LogLevel.debug, '           ‚Ä¢ –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è');
      } else {
        _addLog(LogLevel.debug, '           ‚Ä¢ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è: $e');
      }
    }
  }

  Future<void> _analyzeCharacteristicDescriptors(BluetoothDevice device, BluetoothCharacteristic characteristic) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Å–µ –µ—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
      if (!device.isConnected) {
        _addLog(LogLevel.debug, '           ‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä—ã');
        return;
      }
      
      if (characteristic.descriptors.isNotEmpty) {
        _addLog(LogLevel.info, '           ‚Ä¢ –ê–Ω–∞–ª–∏–∑ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤:');
        
        for (int k = 0; k < characteristic.descriptors.length; k++) {
          final descriptor = characteristic.descriptors[k];
          _addLog(LogLevel.info, '             ${k + 1}. ${descriptor.uuid}');
          
          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞–º–∏
          await Future.delayed(const Duration(milliseconds: 50));
          
          // –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞
          try {
            final descriptorValue = await descriptor.read().timeout(
              const Duration(seconds: 3),
              onTimeout: () {
                throw Exception('–¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞');
              },
            );
            
            if (descriptorValue.isNotEmpty) {
              final hexValue = descriptorValue.map((byte) => byte.toRadixString(16).padLeft(2, '0')).join(' ');
              final stringValue = String.fromCharCodes(descriptorValue.where((byte) => byte >= 32 && byte <= 126));
              
              _addLog(LogLevel.info, '               ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ (HEX): $hexValue');
              if (stringValue.isNotEmpty) {
                _addLog(LogLevel.info, '               ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ (TEXT): "$stringValue"');
              }
            } else {
              _addLog(LogLevel.info, '               ‚Ä¢ –ó–Ω–∞—á–µ–Ω–∏–µ: –ü–£–°–¢–û–ï');
            }
          } catch (e) {
            // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
            if (e.toString().contains('201') || e.toString().contains('WRITE_REQUEST_BUSY')) {
              _addLog(LogLevel.debug, '               ‚Ä¢ GATT –∑–∞–Ω—è—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä');
            } else if (e.toString().contains('timeout')) {
              _addLog(LogLevel.debug, '               ‚Ä¢ –¢–∞–π–º–∞—É—Ç —á—Ç–µ–Ω–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞');
            } else if (e.toString().contains('false')) {
              _addLog(LogLevel.debug, '               ‚Ä¢ –î–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è —á—Ç–µ–Ω–∏—è');
            } else {
              _addLog(LogLevel.debug, '               ‚Ä¢ –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–∞: $e');
            }
          }
        }
      }
    } catch (e) {
      _addLog(LogLevel.debug, '           ‚Ä¢ –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤: $e');
    }
  }

  Future<void> _subscribeToCharacteristic(BluetoothDevice device, BluetoothCharacteristic characteristic) async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—Å–µ –µ—â–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
      if (!device.isConnected) {
        _addLog(LogLevel.debug, '           ‚Ä¢ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É');
        return;
      }
      
      if (characteristic.properties.notify || characteristic.properties.indicate) {
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        await characteristic.setNotifyValue(true).timeout(
          const Duration(seconds: 5),
          onTimeout: () {
            throw Exception('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
          },
        );
        
        _addLog(LogLevel.info, '           ‚Ä¢ –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –ê–ö–¢–ò–í–ù–ê');
        
        // –°–ª—É—à–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        characteristic.lastValueStream.listen((data) {
          if (data.isNotEmpty) {
            final hexValue = data.map((byte) => byte.toRadixString(16).padLeft(2, '0')).join(' ');
            final stringValue = String.fromCharCodes(data.where((byte) => byte >= 32 && byte <= 126));
            
            _addLog(LogLevel.info, '           ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (HEX): $hexValue');
            if (stringValue.isNotEmpty) {
              _addLog(LogLevel.info, '           ‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (TEXT): "$stringValue"');
            }
          }
        }).onError((error) {
          _addLog(LogLevel.warning, '           ‚Ä¢ –û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $error');
        });
      }
    } catch (e) {
      // –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø–æ–¥–ø–∏—Å–∫–∏
      if (e.toString().contains('201') || e.toString().contains('WRITE_REQUEST_BUSY')) {
        _addLog(LogLevel.debug, '           ‚Ä¢ GATT –∑–∞–Ω—è—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É');
      } else if (e.toString().contains('timeout')) {
        _addLog(LogLevel.debug, '           ‚Ä¢ –¢–∞–π–º–∞—É—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');
      } else if (e.toString().contains('setNotifyValue')) {
        _addLog(LogLevel.debug, '           ‚Ä¢ –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
      } else {
        _addLog(LogLevel.debug, '           ‚Ä¢ –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏: $e');
      }
    }
  }

  @override
  Future<bool> reconnectToDevice(String deviceId) async {
    try {
      _addLog(LogLevel.info, '–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —É—Å—Ç—Ä–æ–π—Å—Ç–≤—É: $deviceId');
      
      // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –µ—Å–ª–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã
      final device = _connectedDevices[deviceId];
      if (device != null && device.isConnected) {
        await device.disconnect();
        _connectedDevices.remove(deviceId);
        _addLog(LogLevel.info, '–û—Ç–∫–ª—é—á–∏–ª–∏—Å—å –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º');
        
        // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
        await Future.delayed(const Duration(seconds: 2));
      }
      
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è —Å–Ω–æ–≤–∞
      return await connectToDevice(deviceId);
    } catch (e) {
      _addLog(LogLevel.error, '–û—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $e');
      return false;
    }
  }

  @override
  Future<void> disconnectFromDevice(String deviceId) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ –¥–ª—è –ª–æ–≥–æ–≤
      final deviceInfo = _discoveredDevicesMap[deviceId] ?? _classicDevicesMap[deviceId];
      final deviceName = deviceInfo?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
      
      final device = BluetoothDevice.fromId(deviceId);
      
      if (device.isConnected) {
        _addLog(LogLevel.info, 'üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç "$deviceName"...');
        await device.disconnect();
        _addLog(LogLevel.info, '‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç "$deviceName"');
      } else {
        _addLog(LogLevel.warning, '‚ö†Ô∏è –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ "$deviceName" —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ');
      }
      
      _connectedDevices.remove(deviceId);
    } catch (e) {
      final deviceInfo = _discoveredDevicesMap[deviceId] ?? _classicDevicesMap[deviceId];
      final deviceName = deviceInfo?.name ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
      _addLog(LogLevel.error, '‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –æ—Ç "$deviceName": $e');
    }
  }

  void _listenToDeviceData(BluetoothDevice device) {
    device.connectionState.listen((state) {
      if (state == BluetoothConnectionState.disconnected) {
        _addLog(
          LogLevel.warning, 
          '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å: ${device.platformName}',
          deviceId: device.remoteId.toString(),
          deviceName: device.platformName,
          additionalData: {
            'connection_state': 'disconnected',
            'device_id': device.remoteId.toString(),
          },
        );
        _connectedDevices.remove(device.remoteId.toString());
      } else if (state == BluetoothConnectionState.connected) {
        _addLog(
          LogLevel.info, 
          '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ: ${device.platformName}',
          deviceId: device.remoteId.toString(),
          deviceName: device.platformName,
          additionalData: {
            'connection_state': 'connected',
            'device_id': device.remoteId.toString(),
          },
        );
      }
    });
    
    // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã –∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
    Future.delayed(const Duration(seconds: 2), () {
      if (device.isConnected) {
        device.discoverServices().then((services) {
          _addLog(
            LogLevel.info, 
            '–ù–∞–π–¥–µ–Ω–æ —Å–µ—Ä–≤–∏—Å–æ–≤: ${services.length} –¥–ª—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ ${device.platformName}',
            deviceId: device.remoteId.toString(),
            deviceName: device.platformName,
            additionalData: {
              'services_count': services.length,
              'device_id': device.remoteId.toString(),
            },
          );
          
          for (final service in services) {
            _addLog(
              LogLevel.debug, 
              '–°–µ—Ä–≤–∏—Å: ${service.uuid}',
              deviceId: device.remoteId.toString(),
              deviceName: device.platformName,
              additionalData: {
                'service_uuid': service.uuid.toString(),
                'characteristics_count': service.characteristics.length,
              },
            );
            
            for (final characteristic in service.characteristics) {
              _addLog(
                LogLevel.debug, 
                '–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞: ${characteristic.uuid}',
                deviceId: device.remoteId.toString(),
                deviceName: device.platformName,
                additionalData: {
                  'characteristic_uuid': characteristic.uuid.toString(),
                  'properties': {
                    'read': characteristic.properties.read,
                    'write': characteristic.properties.write,
                    'notify': characteristic.properties.notify,
                    'indicate': characteristic.properties.indicate,
                  },
                },
              );
              
              // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
              if (characteristic.properties.notify) {
                try {
                  characteristic.setNotifyValue(true);
                  characteristic.lastValueStream.listen((data) {
                    _addLog(
                      LogLevel.info, 
                      '–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç ${device.platformName}',
                      deviceId: device.remoteId.toString(),
                      deviceName: device.platformName,
                      additionalData: {
                        'data_length': data.length,
                        'data_hex': data.map((byte) => byte.toRadixString(16).padLeft(2, '0')).join(' '),
                        'data_string': String.fromCharCodes(data.where((byte) => byte >= 32 && byte <= 126)),
                        'characteristic_uuid': characteristic.uuid.toString(),
                      },
                    );
                  });
                } catch (e) {
                  _addLog(
                    LogLevel.warning, 
                    '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: $e',
                    deviceId: device.remoteId.toString(),
                    deviceName: device.platformName,
                    additionalData: {
                      'error': e.toString(),
                      'characteristic_uuid': characteristic.uuid.toString(),
                    },
                  );
                }
              }
            }
          }
        }).catchError((e) {
          _addLog(
            LogLevel.error, 
            '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤: $e',
            deviceId: device.remoteId.toString(),
            deviceName: device.platformName,
            additionalData: {
              'error': e.toString(),
            },
          );
        });
      }
    });
  }

  void _addLog(LogLevel level, String message, {String? deviceId, String? deviceName, Map<String, dynamic>? additionalData}) {
    final now = DateTime.now();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é
    if (_lastLogMessage == message && _lastLogTime != null) {
      final timeDiff = now.difference(_lastLogTime!);
      
      if (timeDiff <= _logDeduplicationWindow) {
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤
        _duplicateLogCount++;
        _lastLogTime = now;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ª–æ–≥ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π
        if (_logs.isNotEmpty) {
          final lastLogIndex = _logs.length - 1;
          final lastLog = _logs[lastLogIndex];
          
          // –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ª–æ–≥ —Å —Å—á–µ—Ç—á–∏–∫–æ–º
          final updatedMessage = _duplicateLogCount > 1 
            ? message.replaceAll(RegExp(r' \(–ø–æ–≤—Ç–æ—Ä–µ–Ω–æ \d+ —Ä–∞–∑\)$'), '') + ' (–ø–æ–≤—Ç–æ—Ä–µ–Ω–æ $_duplicateLogCount —Ä–∞–∑)'
            : message + ' (–ø–æ–≤—Ç–æ—Ä–µ–Ω–æ $_duplicateLogCount —Ä–∞–∑)';
            
          final updatedLog = BluetoothLogModel.create(
            level: level,
            message: updatedMessage,
            deviceId: deviceId,
            deviceName: deviceName,
            additionalData: additionalData,
            timestamp: lastLog.timestamp, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
          );
          
          _logs[lastLogIndex] = updatedLog;
          _logsController.add(updatedLog);
        }
        return;
      }
    }
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    _lastLogMessage = message;
    _lastLogTime = now;
    _duplicateLogCount = 0;
    
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ª–æ–≥
    final log = BluetoothLogModel.create(
      level: level,
      message: message,
      deviceId: deviceId,
      deviceName: deviceName,
      additionalData: additionalData,
    );
    
    _logs.add(log);
    _logsController.add(log);
  }

  @override
  Future<void> clearLogs() async {
    _logs.clear();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ–¥—É–ø–ª–∏–∫–∞—Ü–∏—é –ª–æ–≥–æ–≤
    _lastLogMessage = null;
    _lastLogTime = null;
    _duplicateLogCount = 0;
    
    _addLog(LogLevel.info, '–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã');
  }

  @override
  Future<List<BluetoothLogEntity>> getLogs() async {
    return List.from(_logs);
  }

  /// –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –Ω–æ–≤–æ–µ –∏–º—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ª—É—á—à–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ
  bool _isBetterDeviceName(String newName, String existingName) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –∏–º–µ–Ω
    final newNameValid = _isValidDeviceName(newName);
    final existingNameValid = _isValidDeviceName(existingName);
    
    // –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∏–º—è –≤–∞–ª–∏–¥–Ω–æ–µ, –∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–µ—Ç, –Ω–æ–≤–æ–µ –ª—É—á—à–µ
    if (newNameValid && !existingNameValid) return true;
    
    // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–º—è –≤–∞–ª–∏–¥–Ω–æ–µ, –∞ –Ω–æ–≤–æ–µ –Ω–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ª—É—á—à–µ
    if (!newNameValid && existingNameValid) return false;
    
    // –ï—Å–ª–∏ –æ–±–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–µ, –≤—ã–±–∏—Ä–∞–µ–º –±–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–æ–µ
    if (!newNameValid && !existingNameValid) {
      return newName.length > existingName.length;
    }
    
    // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" –∏–ª–∏ "device", –Ω–æ–≤–æ–µ –∏–º—è –ª—É—á—à–µ
    if (existingName.toLowerCase().contains('—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') || 
        existingName.toLowerCase().contains('device') ||
        existingName.toLowerCase().contains('–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ')) {
      return true;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" –∏–ª–∏ "device", –∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –Ω–µ—Ç, —Ç–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ª—É—á—à–µ
    if (newName.toLowerCase().contains('—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') || 
        newName.toLowerCase().contains('device') ||
        newName.toLowerCase().contains('–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ')) {
      return false;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∏–º—è –¥–ª–∏–Ω–Ω–µ–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç "—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ", –æ–Ω–æ –ª—É—á—à–µ
    if (newName.length > existingName.length && 
        !newName.toLowerCase().contains('—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ')) {
      return true;
    }
    
    // –ï—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –∏–º—è —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ (–º–µ–Ω–µ–µ 3 —Å–∏–º–≤–æ–ª–æ–≤), –Ω–æ–≤–æ–µ –∏–º—è –ª—É—á—à–µ
    if (existingName.length < 3) {
      return true;
    }
    
    // –ï—Å–ª–∏ –Ω–æ–≤–æ–µ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –±—Ä–µ–Ω–¥—ã, –æ–Ω–æ –ª—É—á—à–µ
    final knownBrands = ['samsung', 'iphone', 'jbl', 'sony', 'bose', 'xiaomi', 'huawei', 'oneplus'];
    final newHasBrand = knownBrands.any((brand) => newName.toLowerCase().contains(brand));
    final existingHasBrand = knownBrands.any((brand) => existingName.toLowerCase().contains(brand));
    
    if (newHasBrand && !existingHasBrand) return true;
    if (!newHasBrand && existingHasBrand) return false;
    
    return false;
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–º—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –Ω–∞—à–∏–º –∞–ª–≥–æ—Ä–∏—Ç–º–æ–º
  bool _isGeneratedName(String name) {
    final lowerName = name.toLowerCase();
    return lowerName.contains('—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ') || 
           lowerName.contains('–∞—É–¥–∏–æ') || 
           lowerName.contains('—Ñ–∏—Ç–Ω–µ—Å') || 
           lowerName.contains('–≤–≤–æ–¥') ||
           lowerName.startsWith('bluetooth —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ');
  }
  
  /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–º—è –æ–±—â–∏–º/–Ω–µ—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º
  bool _isGenericName(String name) {
    final lowerName = name.toLowerCase();
    return lowerName.contains('–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ') ||
           lowerName.contains('unknown') ||
           lowerName == 'device' ||
           lowerName == 'bluetooth';
  }

  /// –û—á–∏—â–∞–µ—Ç –∫–∞—Ä—Ç—É –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏)
  void _clearDiscoveredDevices() {
    _discoveredDevicesMap.clear();
    _addLog(LogLevel.info, '–û—á–∏—â–µ–Ω–∞ –∫–∞—Ä—Ç–∞ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤');
  }

  void dispose() {
    _devicesController.close();
    _logsController.close();
    _isScanningController.close();
    _isBluetoothEnabledController.close();
  }
}
