import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:flutter_blue_plus/flutter_blue_plus.dart' as ble;
import 'package:permission_handler/permission_handler.dart';
import 'dart:async';
import 'dart:math';
import '../bloc/bluetooth_bloc.dart';
import '../bloc/bluetooth_state.dart' as app_state;
import '../../data/services/ble_peripheral_service.dart';
import '../widgets/treadmill_data_modal.dart';
import '../components/notification.dart';

class EmulationScreen extends StatefulWidget {
  const EmulationScreen({super.key});

  @override
  State<EmulationScreen> createState() => _EmulationScreenState();
}

class _EmulationScreenState extends State<EmulationScreen> {
  bool _isEmulating = false;
  int _heartRate = 75;
  int _batteryLevel = 85;
  Timer? _heartRateTimer;
  final BlePeripheralService _bleService = BlePeripheralService();
  StreamSubscription? _heartRateSubscription;
  StreamSubscription? _batterySubscription;
  StreamSubscription? _connectionSubscription;
  StreamSubscription? _deviceConnectedSubscription;
  StreamSubscription? _dataReceivedSubscription;
  bool _isDataModalOpen = false; // –§–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –º–æ–¥–∞–ª–∫—É –ø–æ–≤—Ç–æ—Ä–Ω–æ

  @override
  void dispose() {
    _stopEmulation();
    _heartRateSubscription?.cancel();
    _batterySubscription?.cancel();
    _connectionSubscription?.cancel();
    _deviceConnectedSubscription?.cancel();
    _dataReceivedSubscription?.cancel();
    _bleService.dispose();
    super.dispose();
  }

  @override
  void initState() {
    super.initState();
    _setupBleServiceListeners();
    _setupBluetoothBloc();
  }

  void _setupBluetoothBloc() {
    // –ü–µ—Ä–µ–¥–∞–µ–º BluetoothBloc –≤ BLE —Å–µ—Ä–≤–∏—Å –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    final bluetoothBloc = context.read<BluetoothBloc>();
    _bleService.setBluetoothBloc(bluetoothBloc);
  }

  void _setupBleServiceListeners() {
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—É–ª—å—Å–∞ –æ—Ç BLE —Å–µ—Ä–≤–∏—Å–∞
    _heartRateSubscription = _bleService.heartRateStream.listen((heartRate) {
      if (mounted) {
        setState(() {
          _heartRate = heartRate;
        });
      }
    });

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏ –æ—Ç BLE —Å–µ—Ä–≤–∏—Å–∞
    _batterySubscription = _bleService.batteryStream.listen((battery) {
      if (mounted) {
        setState(() {
          _batteryLevel = battery;
        });
      }
    });

    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
    _connectionSubscription = _bleService.connectionStream.listen((isConnected) {
      if (mounted) {
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è—Ö/–æ—Ç–∫–ª—é—á–µ–Ω–∏—è—Ö
        MyToastNotification().showInfoToast(context, isConnected ? '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å –∫ —ç–º—É–ª—è—Ç–æ—Ä—É!' : '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–∫–ª—é—á–∏–ª–æ—Å—å');
      }
    });

    // –°–ª—É—à–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —ç–∫—Ä–∞–Ω–∞ –¥–∞–Ω–Ω—ã—Ö
    print('EmulationScreen: –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π —É—Å—Ç—Ä–æ–π—Å—Ç–≤...');
    print('EmulationScreen: BLE Service: ${_bleService.runtimeType}');
    print('EmulationScreen: Device Connected Stream: ${_bleService.deviceConnectedStream}');
    
    _deviceConnectedSubscription = _bleService.deviceConnectedStream.listen((deviceData) {
      print('EmulationScreen: ===== –ü–û–õ–£–ß–ï–ù–û –°–û–ë–´–¢–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø =====');
      print('EmulationScreen: –î–∞–Ω–Ω—ã–µ: $deviceData');
      print('EmulationScreen: –¢–∏–ø –¥–∞–Ω–Ω—ã—Ö: ${deviceData.runtimeType}');
      print('EmulationScreen: –ö–ª—é—á–∏: ${deviceData.keys.toList()}');
      print('EmulationScreen: Widget mounted: $mounted');
      
      if (mounted) {
        final deviceName = deviceData['deviceName'] as String? ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
        final deviceAddress = deviceData['deviceAddress'] as String? ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–¥—Ä–µ—Å';
        final bondState = deviceData['bondState'] as int? ?? 0;
        final isConnected = deviceData['isConnected'] as bool? ?? false;
        
        print('EmulationScreen: ===== –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø =====');
        print('EmulationScreen: –ò–º—è: $deviceName');
        print('EmulationScreen: –ê–¥—Ä–µ—Å: $deviceAddress');
        print('EmulationScreen: Bond: $bondState, Connected: $isConnected');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (–±–µ–∑ –∞–≤—Ç–æ-–¥–µ–π—Å—Ç–≤–∏—è)
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Column(
              mainAxisSize: MainAxisSize.min,
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text('üéâ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –ø–æ–¥–∫–ª—é—á–∏–ª–æ—Å—å!'),
                Text('$deviceName', style: TextStyle(fontWeight: FontWeight.bold)),
                Text('MAC: $deviceAddress', style: TextStyle(fontSize: 12)),
              ],
            ),
            backgroundColor: Colors.green,
            duration: const Duration(seconds: 6),
          ),
        );
        
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ (–æ–¥–∏–Ω —Ä–∞–∑)
        if (!_isDataModalOpen) {
          print('EmulationScreen: –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è $deviceName');
          _openTreadmillDataModal(deviceName, deviceAddress);
        }
      }
    });

    // –°–ª—É—à–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –¥–æ—Ä–æ–∂–∫–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    _dataReceivedSubscription = _bleService.dataReceivedStream.listen((data) {
      if (mounted) {
        final deviceName = data['deviceName'] as String? ?? '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ';
        final hexData = data['hexData'] as String? ?? '';
        
        print('EmulationScreen: –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç $deviceName: $hexData');
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
        MyToastNotification().showInfoToast(context, 'üìä –î–∞–Ω–Ω—ã–µ –æ—Ç $deviceName: ${hexData.length > 20 ? '${hexData.substring(0, 20)}...' : hexData}');
      }
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–≠–º—É–ª—è—Ü–∏—è —á–∞—Å–æ–≤'),
        backgroundColor: Colors.green.shade700,
        foregroundColor: Colors.white,
      ),
      body: BlocBuilder<BluetoothBloc, app_state.BluetoothState>(
        builder: (context, state) {
          return SingleChildScrollView(
            padding: const EdgeInsets.all(16.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.stretch,
              children: [
                // –°—Ç–∞—Ç—É—Å —ç–º—É–ª—è—Ü–∏–∏
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      children: [
                        Row(
                          children: [
                            Icon(
                              _isEmulating ? Icons.bluetooth_connected : Icons.bluetooth_disabled,
                              color: _isEmulating ? Colors.green : Colors.grey,
                              size: 32,
                            ),
                            const SizedBox(width: 16),
                            Expanded(
                              child: Column(
                                crossAxisAlignment: CrossAxisAlignment.start,
                                children: [
                                  Text(
                                    _isEmulating ? '–≠–º—É–ª—è—Ü–∏—è –∞–∫—Ç–∏–≤–Ω–∞' : '–≠–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞',
                                    style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                                      color: _isEmulating ? Colors.green : Colors.grey,
                                      fontWeight: FontWeight.bold,
                                    ),
                                  ),
                                  Text(
                                    _isEmulating 
                                      ? '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∏–¥–∏–º–æ –∫–∞–∫ —Ñ–∏—Ç–Ω–µ—Å-—á–∞—Å—ã'
                                      : '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—á–∞–ª–∞ —ç–º—É–ª—è—Ü–∏–∏',
                                    style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                                      color: Colors.grey.shade600,
                                    ),
                                  ),
                                ],
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
                
                const SizedBox(height: 24),
                
                // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º—É–ª—è—Ü–∏–∏
                Card(
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(
                          '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —ç–º—É–ª—è—Ü–∏–∏',
                          style: Theme.of(context).textTheme.titleLarge?.copyWith(
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                        const SizedBox(height: 16),
                        
                        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É–ª—å—Å–∞
                        Row(
                          children: [
                            Icon(Icons.favorite, color: Colors.red),
                            const SizedBox(width: 8),
                            Text('–ü—É–ª—å—Å:', style: Theme.of(context).textTheme.bodyLarge),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Slider(
                                value: _heartRate.toDouble(),
                                min: 60,
                                max: 180,
                                divisions: 120,
                                label: '$_heartRate —É–¥/–º–∏–Ω',
                                onChanged: _isEmulating ? null : (value) {
                                  final newHeartRate = value.round();
                                  setState(() {
                                    _heartRate = newHeartRate;
                                  });
                                  // –û–±–Ω–æ–≤–ª—è–µ–º –≤ BLE —Å–µ—Ä–≤–∏—Å–µ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
                                  if (_bleService.isAdvertising) {
                                    _bleService.updateHeartRate(newHeartRate);
                                  }
                                },
                              ),
                            ),
                            Text(
                              '$_heartRate',
                              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                                color: Colors.red,
                              ),
                            ),
                          ],
                        ),
                        
                        const SizedBox(height: 16),
                        
                        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Ä–æ–≤–Ω—è –±–∞—Ç–∞—Ä–µ–∏
                        Row(
                          children: [
                            Icon(Icons.battery_std, color: Colors.green),
                            const SizedBox(width: 8),
                            Text('–ë–∞—Ç–∞—Ä–µ—è:', style: Theme.of(context).textTheme.bodyLarge),
                            const SizedBox(width: 8),
                            Expanded(
                              child: Slider(
                                value: _batteryLevel.toDouble(),
                                min: 0,
                                max: 100,
                                divisions: 100,
                                label: '$_batteryLevel%',
                                onChanged: _isEmulating ? null : (value) {
                                  final newBatteryLevel = value.round();
                                  setState(() {
                                    _batteryLevel = newBatteryLevel;
                                  });
                                  // –û–±–Ω–æ–≤–ª—è–µ–º –≤ BLE —Å–µ—Ä–≤–∏—Å–µ –µ—Å–ª–∏ –æ–Ω –∞–∫—Ç–∏–≤–µ–Ω
                                  if (_bleService.isAdvertising) {
                                    _bleService.updateBatteryLevel(newBatteryLevel);
                                  }
                                },
                              ),
                            ),
                            Text(
                              '$_batteryLevel%',
                              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                                color: Colors.green,
                              ),
                            ),
                          ],
                        ),
                      ],
                    ),
                  ),
                ),
                
                const SizedBox(height: 24),
                
                // –ö–Ω–æ–ø–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                SizedBox(
                  height: 60,
                  child: ElevatedButton.icon(
                    onPressed: _isEmulating ? _stopEmulation : _startEmulation,
                    icon: Icon(_isEmulating ? Icons.stop : Icons.play_arrow),
                    label: Text(
                      _isEmulating ? '–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —ç–º—É–ª—è—Ü–∏—é' : '–ó–∞–ø—É—Å—Ç–∏—Ç—å —ç–º—É–ª—è—Ü–∏—é',
                      style: const TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: _isEmulating ? Colors.red : Colors.green,
                      foregroundColor: Colors.white,
                      shape: RoundedRectangleBorder(
                        borderRadius: BorderRadius.circular(12),
                      ),
                    ),
                  ),
                ),
                
                const SizedBox(height: 24),
                
                // –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –¥–æ—Ä–æ–∂–∫–∞–º–∏
                Card(
                  color: Colors.orange.shade50,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Icon(Icons.directions_run, color: Colors.orange.shade700),
                            const SizedBox(width: 8),
                            Text(
                              '–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –¥–æ—Ä–æ–∂–∫–∞–º–∏',
                              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                                color: Colors.orange.shade700,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '–ú–Ω–æ–≥–∏–µ –±–µ–≥–æ–≤—ã–µ –¥–æ—Ä–æ–∂–∫–∏ —Ç—Ä–µ–±—É—é—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Ñ–∏—Ç–Ω–µ—Å-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –¥–ª—è:\n'
                          '‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—É–ª—å—Å–∞ –Ω–∞ —ç–∫—Ä–∞–Ω–µ\n'
                          '‚Ä¢ –ê–¥–∞–ø—Ç–∞—Ü–∏–∏ –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n'
                          '‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n\n'
                          '–î–æ—Å—Ç—É–ø–Ω—ã–µ –±—Ä–µ–Ω–¥—ã: Technogym, Life Fitness, Precor, Matrix –∏ –¥—Ä—É–≥–∏–µ.',
                          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                            color: Colors.orange.shade700,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                
                const SizedBox(height: 16),
                
                // –ü—Ä–æ–±–ª–µ–º—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                Card(
                  color: Colors.red.shade50,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Icon(Icons.error_outline, color: Colors.red.shade700),
                            const SizedBox(width: 8),
                            Text(
                              '–ü–æ—á–µ–º—É –Ω–µ –≤–∏–¥–Ω–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ?',
                              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                                color: Colors.red.shade700,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '‚ùå Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –ù–ï –ú–û–ì–£–¢ –≤–∏–¥–µ—Ç—å —Å–∞–º–∏ —Å–µ–±—è –≤ Bluetooth —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏.\n\n'
                          '‚úÖ –î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω—ã:\n'
                          '‚Ä¢ –ë–µ–≥–æ–≤–∞—è –¥–æ—Ä–æ–∂–∫–∞ —Å Bluetooth\n'
                          '‚Ä¢ –î—Ä—É–≥–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω/–ø–ª–∞–Ω—à–µ—Ç\n'
                          '‚Ä¢ –ö–æ–º–ø—å—é—Ç–µ—Ä —Å Bluetooth –∞–¥–∞–ø—Ç–µ—Ä–æ–º\n'
                          '‚Ä¢ Bluetooth —Å–∫–∞–Ω–µ—Ä –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n'
                          '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É –Ω–∞ –æ–¥–Ω–æ–π –∏–∑ —ç—Ç–∏—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤!',
                          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                            color: Colors.red.shade700,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
                
                const SizedBox(height: 16),
                
                // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                Card(
                  color: Colors.blue.shade50,
                  child: Padding(
                    padding: const EdgeInsets.all(16.0),
                    child: Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Row(
                          children: [
                            Icon(Icons.info, color: Colors.blue.shade700),
                            const SizedBox(width: 8),
                            Text(
                              '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è',
                              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                                fontWeight: FontWeight.bold,
                                color: Colors.blue.shade700,
                              ),
                            ),
                          ],
                        ),
                        const SizedBox(height: 8),
                        Text(
                          '–ü—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–π —ç–º—É–ª—è—Ü–∏–∏ –≤–∞—à–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö Bluetooth-—É—Å—Ç—Ä–æ–π—Å—Ç–≤ –∫–∞–∫ —Ñ–∏—Ç–Ω–µ—Å-—á–∞—Å—ã –∏–ª–∏ –ø—É–ª—å—Å–æ–º–µ—Ç—Ä. –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –¥–æ—Ä–æ–∂–∫–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç —Ç–æ–ª—å–∫–æ —Ç–∞–∫–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\n'
                          '–§—É–Ω–∫—Ü–∏—è –≤–∫–ª—é—á–∞–µ—Ç –≤ —Å–µ–±—è:\n'
                          '‚Ä¢ Heart Rate Service (0x180D) - –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—É–ª—å—Å–µ\n'
                          '‚Ä¢ Battery Service (0x180F) - –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ü–∏–∏ –∑–∞—Ä—è–¥–∞ –±–∞—Ç–∞—Ä–µ–∏\n'
                          '‚Ä¢ Device Information Service (0x180A) - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ\n\n'
                          '‚úÖ –ü–û–õ–ù–ê–Ø –†–ï–ê–õ–ò–ó–ê–¶–ò–Ø: –ù–∞—Ç–∏–≤–Ω–∞—è BLE —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è + GATT —Å–µ—Ä–≤–µ—Ä –¥–ª—è Android.\n\n'
                          '‚ö†Ô∏è –í–ê–ñ–ù–û: Android —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –Ω–µ –º–æ–≥—É—Ç –≤–∏–¥–µ—Ç—å —Å–∞–º–∏ —Å–µ–±—è –≤ BLE —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–Ω—ã –¥—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ (–¥–æ—Ä–æ–∂–∫–∞, –¥—Ä—É–≥–æ–π —Ç–µ–ª–µ—Ñ–æ–Ω, –∫–æ–º–ø—å—é—Ç–µ—Ä —Å Bluetooth).',
                          style: Theme.of(context).textTheme.bodyMedium?.copyWith(
                            color: Colors.blue.shade700,
                          ),
                        ),
                      ],
                    ),
                  ),
                ),
              ],
            ),
          );
        },
      ),
    );
  }

  Future<void> _startEmulation() async {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bluetooth
      if (!await ble.FlutterBluePlus.isAvailable) {
        if(mounted) {
          MyToastNotification().showErrorToast(context, 'Bluetooth –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –Ω–∞ —ç—Ç–æ–º —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ');
        }
        return;
      }

      if (await ble.FlutterBluePlus.adapterState.first != ble.BluetoothAdapterState.on) {
        if(mounted) {
          MyToastNotification().showErrorToast(context, '–í–∫–ª—é—á–∏—Ç–µ Bluetooth –¥–ª—è —ç–º—É–ª—è—Ü–∏–∏');
        }
        return;
      }

      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º BLE –ø–µ—Ä–∏—Ñ–µ—Ä–∏–π–Ω—ã–π —Å–µ—Ä–≤–∏—Å
      final initialized = await _bleService.initialize();
      if (!initialized) {
        if(mounted) {
          MyToastNotification().showErrorToast(context, '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ BLE —Å–µ—Ä–≤–∏—Å–∞');
        }
        return;
      }

      // –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–∫–ª–∞–º–∞—Ü–∏—é –∫–∞–∫ —Ñ–∏—Ç–Ω–µ—Å-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
      final advertisingStarted = await _bleService.startAdvertising(
        deviceName: 'Fitness Watch',
        heartRate: _heartRate,
        batteryLevel: _batteryLevel,
      );

      if (!advertisingStarted) {
        if(mounted) {
          MyToastNotification().showErrorToast(context, '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–µ–∫–ª–∞–º–∞—Ü–∏—é');
        }
        return;
      }
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—É–ª—å—Å–∞
      _startHeartRateSimulation();

      setState(() {
        _isEmulating = true;
      });

      if(mounted) {
        MyToastNotification().showSuccessToast(context, '‚úÖ BLE —Ä–µ–∫–ª–∞–º–∞—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞!\nüì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤–∏–¥–∏–º–æ –∫–∞–∫ "Fitness Watch"');
      }
      
    } catch (e) {
      String errorMessage = '–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —ç–º—É–ª—è—Ü–∏–∏: $e';
      
      if (e.toString().contains('PERMISSIONS_REQUIRED') || 
          e.toString().contains('PERMISSION_DENIED') ||
          e.toString().contains('BLUETOOTH_ADVERTISE')) {
        errorMessage = '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π –¥–ª—è BLE —Ä–µ–∫–ª–∞–º–∞—Ü–∏–∏!';
      }
      if(mounted) {
        MyToastNotification().showErrorToast(context, errorMessage);
      }
    }
  }

  Future<void> _stopEmulation() async {
    try {
      _stopHeartRateSimulation();
      await _bleService.stopAdvertising();
      
      setState(() {
        _isEmulating = false;
      });
      if(mounted) {
      MyToastNotification().showSuccessToast(context, '–≠–º—É–ª—è—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!');
      }
    } catch (e) {
      if(mounted) {
        MyToastNotification().showErrorToast(context, '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —ç–º—É–ª—è—Ü–∏–∏: $e');
      }
    }
  }

  void _startHeartRateSimulation() {
    _heartRateTimer = Timer.periodic(const Duration(seconds: 5), (timer) {
      if (mounted && _bleService.isAdvertising) {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è –ø—É–ª—å—Å–∞
        final random = Random();
        final variation = random.nextInt(10) - 5; // ¬±5 –æ—Ç –±–∞–∑–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        final newHeartRate = (_heartRate + variation).clamp(60, 180);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —á–µ—Ä–µ–∑ BLE —Å–µ—Ä–≤–∏—Å
        _bleService.updateHeartRate(newHeartRate);
        
        setState(() {
          _heartRate = newHeartRate;
        });
      }
    });
  }

  void _stopHeartRateSimulation() {
    _heartRateTimer?.cancel();
    _heartRateTimer = null;
  }

  void _openTreadmillDataModal(String deviceName, String deviceAddress) {
    if (_isDataModalOpen) return;
    _isDataModalOpen = true;
    showDialog(
      context: context,
      barrierDismissible: false, // –ù–µ–ª—å–∑—è –∑–∞–∫—Ä—ã—Ç—å —Å–ª—É—á–∞–π–Ω–æ
      builder: (context) => TreadmillDataModal(
        deviceName: deviceName,
        deviceAddress: deviceAddress,
      ),
    ).whenComplete(() {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥, –∫–æ–≥–¥–∞ –º–æ–¥–∞–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞
      _isDataModalOpen = false;
    });
  }

}
